[debug] Created tunnel using local port: '64015'

[debug] SERVER: "127.0.0.1:64015"

[debug] Original chart version: ""
[debug] CHART PATH: /Users/mdebarros/Documents/ModusDocs/Projects/MojaLoop/git/fork/deploy/helm/mojaloop

NAME:   test123
REVISION: 1
RELEASED: Mon Aug 13 13:47:39 2018
CHART: mojaloop-3.4.0
USER-SUPPLIED VALUES:
{}

COMPUTED VALUES:
central:
  centraldirectory:
    centralenduserregistry:
      config:
        default_json: ' { "PORT": $service_port, "HOSTNAME": "http://$ingress_host"
          } '
      enabled: true
      global:
        config:
          affinity: {}
          nodeSelector: {}
          tolerations: []
      image:
        pullPolicy: Always
        repository: mojaloop/central-end-user-registry
        tag: v2.4
      ingress:
        annotations: null
        enabled: false
        externalPath: /
        hosts:
          api: central-end-user-registry.local
        tls: null
      init:
        enabled: true
      livenessProbe:
        enabled: true
        httpGet:
          path: /health
        initialDelaySeconds: 45
        periodSeconds: 15
      nameOverride: centralenduserregistry
      postgresql:
        affinity: {}
        enabled: true
        global:
          config:
            affinity: {}
            nodeSelector: {}
            tolerations: []
        image: postgres
        imageTag: 9.6.2
        metrics:
          enabled: false
          image: wrouesnel/postgres_exporter
          imagePullPolicy: IfNotPresent
          imageTag: v0.1.1
          imagepullPolicy: Always
          resources:
            requests:
              cpu: 100m
              memory: 256Mi
        nameOverride: centralenduserregistry-postgresql
        networkPolicy:
          allowExternal: true
          enabled: false
        nodeSelector: {}
        persistence:
          accessMode: ReadWriteOnce
          enabled: false
          mountPath: /var/lib/postgresql/data/pgdata
          size: 8Gi
          subPath: postgresql-db
        postgresDatabase: central_end_user_registry
        postgresPassword: yGnTC07WQ6
        postgresUser: end_user_registry
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
        service:
          externalIPs: []
          port: 5432
          type: ClusterIP
        tolerations: []
      readinessProbe:
        enabled: true
        httpGet:
          path: /health
        initialDelaySeconds: 45
        periodSeconds: 15
      replicaCount: 1
      resources: {}
      service:
        annotations: {}
        external:
          enabled: false
          ip: 10.0.2.2
          ports:
            provisioning:
              externalPort: 3001
              name: http-api
        ports:
          api:
            externalPort: 3001
            internalPort: 3001
            name: http-api
        type: ClusterIP
    config:
      CDIR_ADMIN_KEY: admin
      CDIR_ADMIN_SECRET: admin
      CDIR_PATHFINDER__PROVISIONING__ADDRESS: http://$pathfinder_host:8080/nrs-pi/services/SIPIX/SendRequest
      CDIR_PATHFINDER__QUERY__ADDRESS: $pathfinder_host
      CDIR_PATHFINDER__QUERY__PORT: "15353"
      default_json: ' { "PORT": $service_port, "HOSTNAME": "http://$ingress_host",
        "END_USER_REGISTRY_URL": "http://$centralenduserregistry_host:$centralenduserregistry_port",
        "SCHEME_ID": "001", "DEFAULT_DFSP": "", "ENABLE_TOKEN_AUTH": false, "PATHFINDER":
        { "PARTNER_ID": 10305, "SERVICE": "E2U+mm", "CACHE_TIME": 300000, "REGEX":
        { "PATTERN": "^.*$", "REPLACE": "mm:#{identifier}@leveloneproject.org" },
        "QUERY": { "ADDRESS": "$pathfinder_host", "PORT": 15353, "TIMEOUT": 15000
        }, "PROVISIONING": { "ADDRESS": "http://$pathfinder_host:$pathfinder_provisioning_port/nrs-pi/services/SIPIX/SendRequest"
        } } } '
    enabled: true
    global:
      config:
        affinity: {}
        nodeSelector: {}
        tolerations: []
    image:
      pullPolicy: Always
      repository: mojaloop/central-directory
      tag: v2.4
    ingress:
      annotations:
        nginx.ingress.kubernetes.io/rewrite-target: /
      enabled: true
      externalPath: /
      hosts:
        api: central-directory.local
      tls: null
    init:
      enabled: true
    livenessProbe:
      enabled: true
      httpGet:
        path: /health
      initialDelaySeconds: 60
      periodSeconds: 15
    mockpathfinder:
      config:
        default_json: ' { "QUERY": { "PORT": $query_port, "DEFAULT_RECORD": { "order":
          10, "preference": 50, "flags": "u", "service": "E2U+pstn:tel", "regexp":
          "!^(.*)$!tel:\\1;q_stat=102!", "replacement": "", "ttl": 900 } }, "PROVISIONING":
          { "PORT": $provisioning_port, "PATH": "/nrs-pi/services/SIPIX/SendRequest",
          "WSDL_FILE": "./sipix-2.0.0.wsdl", "DEFAULT_CUSTOMER_ID": 1234 } } '
      enabled: true
      global:
        config:
          affinity: {}
          nodeSelector: {}
          tolerations: []
      image:
        pullPolicy: Always
        repository: mojaloop/mock-pathfinder
        tag: v2.4
      ingress:
        annotations: null
        enabled: false
        hosts:
          api: mock-pathfinder.local
        tls: null
      nameOverride: mockpathfinder
      postgresql:
        affinity: {}
        enabled: true
        global:
          config:
            affinity: {}
            nodeSelector: {}
            tolerations: []
        image: postgres
        imageTag: 9.6.2
        metrics:
          enabled: false
          image: wrouesnel/postgres_exporter
          imagePullPolicy: IfNotPresent
          imageTag: v0.1.1
          imagepullPolicy: Always
          resources:
            requests:
              cpu: 100m
              memory: 256Mi
        nameOverride: mockpathfinder-postgresql
        networkPolicy:
          allowExternal: true
          enabled: false
        nodeSelector: {}
        persistence:
          accessMode: ReadWriteOnce
          enabled: false
          mountPath: /var/lib/postgresql/data/pgdata
          size: 8Gi
          subPath: postgresql-db
        postgresDatabase: mock_pathfinder
        postgresPassword: IypvXbJ1Zb
        postgresUser: mock-pathfinder
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
        service:
          externalIPs: []
          port: 5432
          type: ClusterIP
        tolerations: []
      replicaCount: 1
      resources: {}
      service:
        annotations: {}
        external:
          enabled: false
          ip: 10.0.2.2
          ports:
            provisioning:
              externalPort: 8080
              name: tcp-prov
            query:
              externalPort: 15353
              name: tcp-query
        ports:
          provisioning:
            externalPort: 8080
            internalPort: 8080
            name: tcp-prov
            protocol: TCP
          tcp_query:
            externalPort: 15353
            internalPort: 15353
            name: tcp-query
            protocol: TCP
          udp_query:
            externalPort: 15353
            internalPort: 15353
            name: udp-query
            protocol: UDP
        type: ClusterIP
    postgresql:
      affinity: {}
      enabled: true
      global:
        config:
          affinity: {}
          nodeSelector: {}
          tolerations: []
      image: postgres
      imageTag: 9.6.2
      metrics:
        enabled: false
        image: wrouesnel/postgres_exporter
        imagePullPolicy: IfNotPresent
        imageTag: v0.1.1
        imagepullPolicy: Always
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
      nameOverride: centraldirectory-postgresql
      networkPolicy:
        allowExternal: true
        enabled: false
      nodeSelector: {}
      persistence:
        accessMode: ReadWriteOnce
        enabled: false
        mountPath: /var/lib/postgresql/data/pgdata
        size: 8Gi
        subPath: postgresql-db
      postgresDatabase: central_directory
      postgresPassword: gR5hARbsfa
      postgresUser: central-directory
      resources:
        requests:
          cpu: 100m
          memory: 256Mi
      service:
        externalIPs: []
        port: 5432
        type: ClusterIP
      tolerations: []
    readinessProbe:
      enabled: true
      httpGet:
        path: /health
      initialDelaySeconds: 60
      periodSeconds: 15
    replicaCount: 1
    resources: {}
    service:
      annotations: {}
      external:
        enabled: false
        ip: 10.0.2.2
        ports:
          api:
            externalPort: 3000
            name: http-api
      ports:
        api:
          externalPort: 3000
          internalPort: 3000
          name: http-api
      type: ClusterIP
  centralhub:
    centralledger:
      config:
        admin_key: admin
        admin_secret: admin
        db_driver: mysql
        db_type: mysql
        default_json: |
          {
            "PORT": $service_api_port,
            "ADMIN_PORT": $service_admin_port,
            "HOSTNAME": "$ingress_host",
            "ENABLE_TOKEN_AUTH": false,
            "ENABLE_BASIC_AUTH": false,
            "LEDGER_ACCOUNT_NAME": "LedgerName",
            "LEDGER_ACCOUNT_PASSWORD": "LedgerPassword",
            "AMOUNT": {
              "PRECISION": 10,
              "SCALE": 2
            },
            "SIDECAR": {
              "DISABLED": false,
              "HOST": "$forensicloggingsidecar_host",
              "PORT": $forensicloggingsidecar_port,
              "CONNECT_TIMEOUT": 45000,
              "RECONNECT_INTERVAL": 5000
            },
            "EMAIL_USER": "modusboxemailtest@gmail.com",
            "EMAIL_PASSWORD": "April2o0%",
            "EMAIL_SMTP": "smtp.gmail.com",
            "KAFKA": {
              "TOPIC_TEMPLATES": {
                "PARTICIPANT_TOPIC_TEMPLATE": {
                  "TEMPLATE": "topic-{{participantName}}-{{functionality}}-{{action}}",
                  "REGEX": "topic-(.*)-(.*)-(.*)"
                },
                "GENERAL_TOPIC_TEMPLATE": {
                  "TEMPLATE": "topic-{{functionality}}-{{action}}",
                  "REGEX": "topic-(.*)-(.*)"
                }
              },
              "CONSUMER": {
                "TRANSFER": {
                  "PREPARE": {
                    "config": {
                      "options": {
                        "mode": 2,
                        "batchSize": 1,
                        "pollFrequency": 10,
                        "recursiveTimeout": 100,
                        "messageCharset": "utf8",
                        "messageAsJSON": true,
                        "sync": true,
                        "consumeTimeout": 1000
                      },
                      "rdkafkaConf": {
                        "client.id": "transfer-prepare",
                        "debug": "all",
                        "group.id": "central-ledger-kafka",
                        "metadata.broker.list": "$kafka_host:$kafka_port",
                        "enable.auto.commit": false,
                        "socket.keepalive.enable": true,
                        "socket.max.fails": 0
                      }
                    }
                  },
                  "TRANSFER": {
                    "config": {
                      "options": {
                        "mode": 2,
                        "batchSize": 1,
                        "pollFrequency": 10,
                        "recursiveTimeout": 100,
                        "messageCharset": "utf8",
                        "messageAsJSON": true,
                        "sync": true,
                        "consumeTimeout": 1000
                      },
                      "rdkafkaConf": {
                        "client.id": "transfer-transfer",
                        "debug": "all",
                        "group.id": "central-ledger-kafka",
                        "metadata.broker.list": "$kafka_host:$kafka_port",
                        "enable.auto.commit": false,
                        "socket.keepalive.enable": true,
                        "socket.max.fails": 0
                      }
                    }
                  },
                  "FULFIL": {
                    "config": {
                      "options": {
                        "mode": 2,
                        "batchSize": 1,
                        "pollFrequency": 10,
                        "recursiveTimeout": 100,
                        "messageCharset": "utf8",
                        "messageAsJSON": true,
                        "sync": true,
                        "consumeTimeout": 1000
                      },
                      "rdkafkaConf": {
                        "client.id": "transfer-fulfil",
                        "debug": "all",
                        "group.id": "central-ledger-kafka",
                        "metadata.broker.list": "$kafka_host:$kafka_port",
                        "enable.auto.commit": false,
                        "socket.keepalive.enable": true,
                        "socket.max.fails": 0
                      }
                    }
                  },
                  "REJECT": {
                    "config": {
                      "options": {
                        "mode": 2,
                        "batchSize": 1,
                        "pollFrequency": 10,
                        "recursiveTimeout": 100,
                        "messageCharset": "utf8",
                        "messageAsJSON": true,
                        "sync": true,
                        "consumeTimeout": 1000
                      },
                      "rdkafkaConf": {
                        "client.id": "transfer-reject",
                        "debug": "all",
                        "group.id": "central-ledger-kafka",
                        "metadata.broker.list": "$kafka_host:$kafka_port",
                        "enable.auto.commit": false,
                        "socket.keepalive.enable": true,
                        "socket.max.fails": 0
                      }
                    }
                  }
                },
                "POSITION": {
                  "PREPARE": {
                    "config": {
                      "options": {
                        "mode": 2,
                        "batchSize": 1,
                        "pollFrequency": 10,
                        "recursiveTimeout": 100,
                        "messageCharset": "utf8",
                        "messageAsJSON": true,
                        "sync": true,
                        "consumeTimeout": 1000
                      },
                      "rdkafkaConf": {
                        "client.id": "position-prepare",
                        "debug": "all",
                        "group.id": "central-ledger-kafka",
                        "metadata.broker.list": "$kafka_host:$kafka_port",
                        "enable.auto.commit": false,
                        "socket.keepalive.enable": true,
                        "socket.max.fails": 0
                      }
                    }
                  }
                },
                "NOTIFICATION": {
                  "EVENT": {
                    "config": {
                      "options": {
                        "mode": 2,
                        "batchSize": 1,
                        "pollFrequency": 10,
                        "recursiveTimeout": 100,
                        "messageCharset": "utf8",
                        "messageAsJSON": true,
                        "sync": true,
                        "consumeTimeout": 1000
                      },
                      "rdkafkaConf": {
                        "client.id": "notification-event",
                        "debug": "all",
                        "group.id": "central-ledger-kafka",
                        "metadata.broker.list": "$kafka_host:$kafka_port",
                        "enable.auto.commit": false,
                        "socket.keepalive.enable": true,
                        "socket.max.fails": 0
                      }
                    }
                  }
                }
              },
              "PRODUCER": {
                "TRANSFER": {
                  "PREPARE": {
                    "config": {
                      "options": {
                        "messageCharset": "utf8"
                      },
                      "rdkafkaConf": {
                        "debug": "all",
                        "metadata.broker.list": "$kafka_host:$kafka_port",
                        "client.id": "default-client",
                        "event_cb": true,
                        "compression.codec": "none",
                        "retry.backoff.ms": 100,
                        "message.send.max.retries": 2,
                        "socket.keepalive.enable": true,
                        "queue.buffering.max.messages": 10,
                        "queue.buffering.max.ms": 50,
                        "batch.num.messages": 100,
                        "api.version.request": true,
                        "dr_cb": true,
                        "socket.keepalive.enable": true,
                        "socket.max.fails": 0
                      }
                    }
                  },
                  "FULFIL": {
                    "config": {
                      "options": {
                        "messageCharset": "utf8"
                      },
                      "rdkafkaConf": {
                        "debug": "all",
                        "metadata.broker.list": "$kafka_host:$kafka_port",
                        "client.id": "default-client",
                        "event_cb": true,
                        "compression.codec": "none",
                        "retry.backoff.ms": 100,
                        "message.send.max.retries": 2,
                        "socket.keepalive.enable": true,
                        "queue.buffering.max.messages": 10,
                        "queue.buffering.max.ms": 50,
                        "batch.num.messages": 100,
                        "api.version.request": true,
                        "dr_cb": true,
                        "socket.keepalive.enable": true,
                        "socket.max.fails": 0
                      }
                    }
                  },
                  "REJECT": {
                    "config": {
                      "options": {
                        "messageCharset": "utf8"
                      },
                      "rdkafkaConf": {
                        "debug": "all",
                        "metadata.broker.list": "$kafka_host:$kafka_port",
                        "client.id": "default-client",
                        "event_cb": true,
                        "compression.codec": "none",
                        "retry.backoff.ms": 100,
                        "message.send.max.retries": 2,
                        "socket.keepalive.enable": true,
                        "queue.buffering.max.messages": 10,
                        "queue.buffering.max.ms": 50,
                        "batch.num.messages": 100,
                        "api.version.request": true,
                        "dr_cb": true,
                        "socket.keepalive.enable": true,
                        "socket.max.fails": 0
                      }
                    }
                  },
                  "TRANSFER": {
                    "config": {
                      "options": {
                        "messageCharset": "utf8"
                      },
                      "rdkafkaConf": {
                        "debug": "all",
                        "metadata.broker.list": "$kafka_host:$kafka_port",
                        "client.id": "default-client",
                        "event_cb": true,
                        "compression.codec": "none",
                        "retry.backoff.ms": 100,
                        "message.send.max.retries": 2,
                        "socket.keepalive.enable": true,
                        "queue.buffering.max.messages": 10,
                        "queue.buffering.max.ms": 50,
                        "batch.num.messages": 100,
                        "api.version.request": true,
                        "dr_cb": true,
                        "socket.keepalive.enable": true,
                        "socket.max.fails": 0
                      }
                    }
                  }
                },
                "POSITION": {
                  "PREPARE": {
                    "config": {
                      "options": {
                        "messageCharset": "utf8"
                      },
                      "rdkafkaConf": {
                        "debug": "all",
                        "metadata.broker.list": "$kafka_host:$kafka_port",
                        "client.id": "default-client",
                        "event_cb": true,
                        "compression.codec": "none",
                        "retry.backoff.ms": 100,
                        "message.send.max.retries": 2,
                        "socket.keepalive.enable": true,
                        "queue.buffering.max.messages": 10,
                        "queue.buffering.max.ms": 50,
                        "batch.num.messages": 100,
                        "api.version.request": true,
                        "dr_cb": true,
                        "socket.keepalive.enable": true,
                        "socket.max.fails": 0
                      }
                    }
                  }
                },
                "NOTIFICATION": {
                  "EVENT": {
                    "config": {
                      "options": {
                        "messageCharset": "utf8"
                      },
                      "rdkafkaConf": {
                        "debug": "all",
                        "metadata.broker.list": "$kafka_host:$kafka_port",
                        "client.id": "default-client",
                        "event_cb": true,
                        "compression.codec": "none",
                        "retry.backoff.ms": 100,
                        "message.send.max.retries": 2,
                        "socket.keepalive.enable": true,
                        "queue.buffering.max.messages": 10,
                        "queue.buffering.max.ms": 50,
                        "batch.num.messages": 100,
                        "api.version.request": true,
                        "dr_cb": true,
                        "socket.keepalive.enable": true,
                        "socket.max.fails": 0
                      }
                    }
                  }
                }
              }
            }
          }
        kafka_port: 9092
        knexfile_js: |
          'use strict'

          const migrationsDirectory = '/opt/central-ledger/migrations'
          const seedsDirectory = '/opt/central-ledger/seeds'

          const Config = require('/opt/central-ledger/src/lib/config')

          module.exports = {
            client: 'mysql',
            connection: Config.DATABASE_URI,
            migrations: {
              directory: migrationsDirectory,
              tableName: 'migration',
              stub: `${migrationsDirectory}/migration.template`
            },
            seeds: {
              directory: seedsDirectory,
              loadExtensions: ['.js']
            }
          }
      containers:
        admin:
          image:
            command: '["node", "src/admin/index.js"]'
            pullPolicy: Always
            repository: mojaloop/central-ledger
            tag: v2.4
          livenessProbe:
            enabled: true
            httpGet:
              path: /health
            initialDelaySeconds: 90
            periodSeconds: 15
          readinessProbe:
            enabled: true
            httpGet:
              path: /health
            initialDelaySeconds: 120
            periodSeconds: 15
          service:
            httpsEnabled: false
            ports:
              api:
                externalPort: 3001
                internalPort: 3001
                name: http-api-admin
        api:
          image:
            command: '["node", "src/api/index.js"]'
            pullPolicy: Always
            repository: mojaloop/central-ledger
            tag: v2.4
          livenessProbe:
            enabled: true
            httpGet:
              path: /health
            initialDelaySeconds: 90
            periodSeconds: 15
          readinessProbe:
            enabled: true
            httpGet:
              path: /health
            initialDelaySeconds: 120
            periodSeconds: 15
          service:
            httpsEnabled: false
            ports:
              api:
                externalPort: 3000
                internalPort: 3000
                name: http-api
      enabled: true
      forensicloggingsidecar:
        centralkms:
          enabled: true
          global:
            config:
              affinity: {}
              nodeSelector: {}
              tolerations: []
          image:
            pullPolicy: Always
            repository: mojaloop/central-kms
            tag: v2.4
          ingress:
            annotations: null
            enabled: true
            externalPath: /
            hosts:
            - central-kms.local
            tls: null
          livenessProbe:
            enabled: true
            httpGet:
              path: /sidecars
            initialDelaySeconds: 30
            periodSeconds: 5
          nameOverride: centralkms
          postgresql:
            affinity: {}
            enabled: true
            global:
              config:
                affinity: {}
                nodeSelector: {}
                tolerations: []
            image: postgres
            imageTag: 9.6.2
            metrics:
              enabled: false
              image: wrouesnel/postgres_exporter
              imagePullPolicy: IfNotPresent
              imageTag: v0.1.1
              imagepullPolicy: Always
              resources:
                requests:
                  cpu: 100m
                  memory: 256Mi
            nameOverride: centralkms-postgresql
            networkPolicy:
              allowExternal: true
              enabled: false
            nodeSelector: {}
            persistence:
              accessMode: ReadWriteOnce
              enabled: false
              mountPath: /var/lib/postgresql/data/pgdata
              size: 8Gi
              subPath: postgresql-db
            postgresDatabase: central_kms
            postgresPassword: xD873IyaQB
            postgresUser: kms
            resources:
              requests:
                cpu: 100m
                memory: 256Mi
            service:
              externalIPs: []
              port: 5432
              type: ClusterIP
            tolerations: []
          readinessProbe:
            enabled: true
            httpGet:
              path: /sidecars
            initialDelaySeconds: 30
            periodSeconds: 5
          replicaCount: 1
          resources: {}
          service:
            annotations: {}
            external:
              enabled: false
              ip: 10.0.2.2
              ports:
                api:
                  externalPort: 8080
                  name: http-api-and-tcp-websocket
            externalPort: 8080
            internalPort: 8080
            name: http-api-and-tcp-websocket
            type: ClusterIP
        config:
          default_json: ' { "PORT": $servicePort, "SERVICE": "$serviceName", "BATCH_SIZE":
            64, "BATCH_TIME_INTERVAL": 300000, "KMS": { "URL": "ws://$kmsHost:$kmsPort/sidecar",
            "PING_INTERVAL": 30000, "REQUEST_TIMEOUT": 90000, "CONNECT_TIMEOUT": 60000,
            "RECONNECT_INTERVAL": 10000 } } '
        enabled: true
        global:
          config:
            affinity: {}
            nodeSelector: {}
            tolerations: []
        image:
          command: '["/opt/sidecar/server.sh"]'
          pullPolicy: Always
          repository: mojaloop/forensic-logging-sidecar
          tag: v2.4
        ingress:
          annotations: null
          enabled: false
          externalPath: /
          hosts:
            api: forensic-logging-sidecar.local
          tls: null
        livenessProbe:
          enabled: true
          initialDelaySeconds: 90
          periodSeconds: 15
        nameOverride: forensicloggingsidecar-ledger
        postgresql:
          affinity: {}
          enabled: true
          global:
            config:
              affinity: {}
              nodeSelector: {}
              tolerations: []
          image: postgres
          imageTag: 9.6.2
          metrics:
            enabled: false
            image: wrouesnel/postgres_exporter
            imagePullPolicy: IfNotPresent
            imageTag: v0.1.1
            imagepullPolicy: Always
            resources:
              requests:
                cpu: 100m
                memory: 256Mi
          nameOverride: forensicloggingsidecar-ledger-postgresql
          networkPolicy:
            allowExternal: true
            enabled: false
          nodeSelector: {}
          persistence:
            accessMode: ReadWriteOnce
            enabled: false
            mountPath: /var/lib/postgresql/data/pgdata
            size: 8Gi
            subPath: postgresql-db
          postgresDatabase: sidecar
          postgresPassword: Wqt0KlkKvL
          postgresUser: sidecar
          resources:
            requests:
              cpu: 100m
              memory: 256Mi
          service:
            externalIPs: []
            port: 5432
            type: ClusterIP
          tolerations: []
        readinessProbe:
          enabled: true
          initialDelaySeconds: 90
          periodSeconds: 15
        replicaCount: 1
        resources: {}
        service:
          annotations: {}
          external:
            enabled: false
            ip: 10.0.2.2
            ports:
              api:
                externalPort: 5678
                name: http-api-and-ws
          externalPort: 5678
          internalPort: 5678
          name: http-api-and-ws
          type: ClusterIP
      global:
        config:
          affinity: {}
          nodeSelector: {}
          tolerations: []
      ingress:
        annotations:
          nginx.ingress.kubernetes.io/rewrite-target: /
        enabled: true
        externalPath:
          admin: /admin
          api: /
        hosts:
          admin: central-ledger.local
          api: central-ledger.local
        tls: null
        type: http
      init:
        enabled: true
        image:
          name: wait-for-postgres
          pullPolicy: Always
          repository: bowerswilkins/awaitpostgres
          tag: latest
      kafka:
        additionalPorts: {}
        affinity: {}
        configurationOverrides:
          offsets.topic.replication.factor: 1
        enabled: true
        external:
          domain: cluster.local
          enabled: false
          firstListenerPort: 31090
          init:
            image: lwolf/kubectl_deployer
            imagePullPolicy: IfNotPresent
            imageTag: "0.4"
          servicePort: 19092
        global:
          config:
            affinity: {}
            nodeSelector: {}
            tolerations: []
        image: confluentinc/cp-kafka
        imagePullPolicy: IfNotPresent
        imageTag: 4.0.1-1
        jmx:
          configMap:
            enabled: true
            overrideConfig: {}
            overrideName: ""
          port: 5555
          whitelistObjectNames:
          - kafka.controller:*
          - kafka.server:*
          - java.lang:*
          - kafka.network:*
          - kafka.log:*
        kafkaHeapOptions: -Xmx1G -Xms1G
        logSubPath: logs
        nameOverride: kafka
        nodeSelector: {}
        persistence:
          enabled: false
          mountPath: /opt/kafka/data
          size: 1Gi
        podManagementPolicy: OrderedReady
        prometheus:
          jmx:
            enabled: false
            image: solsson/kafka-prometheus-jmx-exporter@sha256
            imageTag: a23062396cd5af1acdf76512632c20ea6be76885dfc20cd9ff40fb23846557e8
            interval: 10s
            port: 5556
            resources: {}
          kafka:
            enabled: false
            image: danielqsj/kafka-exporter
            imageTag: v1.0.1
            interval: 10s
            port: 9308
            resources: {}
          operator:
            enabled: false
            serviceMonitor:
              namespace: monitoring
              selector:
                prometheus: kube-prometheus
        rbac:
          enabled: true
        readinessProbe:
          failureThreshold: 3
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        replicas: 1
        resources: {}
        terminationGracePeriodSeconds: 60
        tolerations: []
        updateStrategy:
          type: OnDelete
        zookeeper:
          affinity: {}
          clientCnxns: 60
          clientPort: 2181
          enabled: true
          global:
            config:
              affinity: {}
              nodeSelector: {}
              tolerations: []
          heap: 1G
          imagePullPolicy: IfNotPresent
          initTicks: 10
          leaderElectionPort: 3888
          logLevel: INFO
          nodeSelector: {}
          persistence:
            enabled: false
            size: 5Gi
          port: 2181
          probeInitialDelaySeconds: 15
          probeTimeoutSeconds: 5
          purgeHours: 1
          replicaCount: 1
          resources:
            limits:
              cpu: 1
              memory: 4Gi
            requests:
              cpu: 500m
              memory: 2Gi
          security:
            enabled: false
            fsGroup: 1000
            runAsUser: 1000
          serverPort: 2888
          servers: 3
          snapRetain: 3
          syncTicks: 5
          tickTimeMs: 2000
          updateStrategy:
            type: OnDelete
          url: ""
      mysql:
        allowRootFrom: '%'
        configFiles:
          node.cnf: |
            [mysqld]
            datadir=/var/lib/mysql
            default_storage_engine=InnoDB
            binlog_format=ROW
            innodb_flush_log_at_trx_commit  = 0
            innodb_flush_method             = O_DIRECT
            innodb_file_per_table           = 1
            innodb_autoinc_lock_mode=2
            bind_address = 0.0.0.0
            wsrep_slave_threads=2
            wsrep_cluster_address=gcomm://
            wsrep_provider=/usr/lib/galera3/libgalera_smm.so
            wsrep_cluster_name=galera
            wsrep_sst_method=xtrabackup-v2
            pxc_strict_mode=DISABLED
        enabled: true
        global:
          config:
            affinity: {}
            nodeSelector: {}
            tolerations: []
        image:
          pullPolicy: Always
          repository: percona/percona-xtradb-cluster
          tag: 5.7.19
        logTail: true
        metricsExporter: false
        mysqlDatabase: central_ledger
        mysqlPassword: oyMxgZChuu
        mysqlUser: central_ledger
        nameOverride: centralledger-mysql
        nodeSelector: {}
        persistence:
          accessMode: ReadWriteOnce
          enabled: false
          size: 8Gi
        replicas: 1
        service:
          externalIPs: []
          port: 3306
          type: ClusterIP
      nameOverride: centralledger
      postgresql:
        affinity: {}
        enabled: true
        global:
          config:
            affinity: {}
            nodeSelector: {}
            tolerations: []
        image: postgres
        imageTag: 9.6.2
        includeReleaseInName: true
        metrics:
          enabled: false
          image: wrouesnel/postgres_exporter
          imagePullPolicy: IfNotPresent
          imageTag: v0.1.1
          imagepullPolicy: Always
          resources:
            requests:
              cpu: 100m
              memory: 256Mi
        nameOverride: centralledger-postgresql
        networkPolicy:
          allowExternal: true
          enabled: false
        nodeSelector: {}
        persistence:
          accessMode: ReadWriteOnce
          enabled: false
          mountPath: /var/lib/postgresql/data/pgdata
          size: 8Gi
          subPath: postgresql-db
        postgresDatabase: central_ledger
        postgresPassword: oyMxgZChuu
        postgresUser: central_ledger
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
        service:
          externalIPs: []
          port: 5432
          type: ClusterIP
        tolerations: []
      replicaCount: 1
      resources: {}
      service:
        annotations: {}
        external:
          enabled: false
          ip: 10.0.2.2
          ports:
            admin:
              externalPort: 3001
              name: http-api-admin
            api:
              externalPort: 3000
              name: http-api
        type: ClusterIP
    config:
      default_json: ' { "PORT": "$service_port", "HOSTNAME": "http://$ingress_host",
        "API_URL": "http://$centralledger_host:$centralledger_api_port", "ADMIN_API_URL":
        "http://$centralledger_host:$centralledger_admin_port" } '
    enabled: true
    global:
      config:
        affinity: {}
        nodeSelector: {}
        tolerations: []
    image:
      pullPolicy: Always
      repository: mojaloop/central-hub
      tag: v2.4
    ingress:
      annotations: null
      enabled: true
      externalPath: /
      hosts:
      - central-hub.local
      tls: null
    livenessProbe:
      enabled: true
      httpGet:
        path: /health
      initialDelaySeconds: 45
      periodSeconds: 15
    readinessProbe:
      enabled: true
      httpGet:
        path: /health
      initialDelaySeconds: 45
      periodSeconds: 15
    replicaCount: 1
    resources: {}
    service:
      annotations: {}
      external:
        enabled: false
        ip: 10.0.2.2
        ports:
          api:
            externalPort: 4001
            name: http-api-and-web
      externalPort: 4001
      internalPort: 4001
      name: http-api-and-web
      type: ClusterIP
  global:
    config:
      affinity: {}
      nodeSelector: {}
      tolerations: []
global:
  config:
    affinity: {}
    nodeSelector: {}
    tolerations: []
interop-switch:
  config:
    CENTRAL_DIR_HOST: centraldirectory
    CENTRAL_DIR_PORT: "3000"
    CONNECTOR_HOST: interop-connector
    MAX_JVM_MEMORY: "256"
    ML_API_ADAPTER_HOST: ml-api-adapter
    ML_API_ADAPTER_PORT: 80
    PSQL_DATABASE: interop_switch
    PSQL_HOST: postgresql
    PSQL_PASSWORD: cVq8iFqaLuHy8jjKuA
    PSQL_PORT: "5432"
    PSQL_USER: interop_switch
    SWITCH_SERVICE_HOST: 0.0.0.0
    SWITCH_SERVICE_PORT: "8088"
  enabled: true
  global:
    config:
      affinity: {}
      nodeSelector: {}
      tolerations: []
  image:
    pullPolicy: Always
    repository: mojaloop/interop-switch
    tag: v2.4
  ingress:
    annotations:
      nginx.ingress.kubernetes.io/rewrite-target: /switch/v1
    enabled: true
    externalPath: /interop/switch/v1
    hosts:
      api: interop-switch.local
    tls: null
  init:
    enabled: true
    image:
      name: create-tables
      pullPolicy: Always
      repository: mojaloop/interop-switch-init-container
      tag: latest
  livenessProbe:
    enabled: true
    httpGet:
      path: /health
    initialDelaySeconds: 60
    periodSeconds: 15
  postgresql:
    affinity: {}
    enabled: true
    global:
      config:
        affinity: {}
        nodeSelector: {}
        tolerations: []
    image: postgres
    imageTag: 9.6.2
    includeReleaseInName: true
    metrics:
      enabled: false
      image: wrouesnel/postgres_exporter
      imagePullPolicy: IfNotPresent
      imageTag: v0.1.1
      imagepullPolicy: Always
      resources:
        requests:
          cpu: 100m
          memory: 256Mi
    nameOverride: interop-switch-postgresql
    networkPolicy:
      allowExternal: true
      enabled: false
    nodeSelector: {}
    persistence:
      accessMode: ReadWriteOnce
      enabled: false
      mountPath: /var/lib/postgresql/data/pgdata
      size: 8Gi
      subPath: postgresql-db
    postgresDatabase: interop_switch
    postgresPassword: cVq8iFqaLuHy8jjKuA
    postgresUser: interop_switch
    resources:
      requests:
        cpu: 100m
        memory: 256Mi
    service:
      externalIPs: []
      port: 5432
      type: ClusterIP
    tolerations: []
  readinessProbe:
    enabled: true
    httpGet:
      path: /health
    initialDelaySeconds: 60
    periodSeconds: 15
  replicaCount: 1
  resources: {}
  service:
    annotations: {}
    external:
      enabled: false
      ip: 10.0.2.2
      ports:
        api:
          externalPort: 3000
          name: http-api
    externalPort: 8088
    internalPort: 8088
    name: interop-switch
    ports:
      api:
        externalPort: 8088
        internalPort: 8088
        name: http-api
    type: ClusterIP
ml-api-adapter:
  global:
    config:
      affinity: {}
      nodeSelector: {}
      tolerations: []
  ml-api-adapter-handler-notification:
    config:
      default_json: |
        {
          "PORT": $ingress_port,
          "HOSTNAME": "$ingress_host",
          "DFSP_URLS": {
            "dfsp1": {
              "transfers": "http://localhost:1080/transfers",
              "error": "http://localhost:1080/transfers/error"
            },
            "dfsp2": {
              "transfers": "http://localhost:1080/transfers",
              "error": "http://localhost:1080/transfers/error"
            }
          },
          "AMOUNT": {
            "PRECISION": 10,
            "SCALE": 2
          },
          "HANDLERS": {
           "DISABLED": false,
           "API": {
             "DISABLED": false
           }
          },
          "KAFKA": {
            "TOPIC_TEMPLATES": {
              "PARTICIPANT_TOPIC_TEMPLATE": {
                "TEMPLATE": "topic-{{participantName}}-{{functionality}}-{{action}}",
                "REGEX": "topic-(.*)-(.*)-(.*)"
              },
              "NOTIFICATION_TOPIC_TEMPLATE": {
                "TEMPLATE": "topic-notification-event",
                "REGEX": "topic-notification-event"
              },
              "FULFIL_TOPIC_TEMPLATE": {
                "TEMPLATE": "topic-transfer-fulfil",
                "REGEX": "topic-transfer-fulfil"
              }
            },
            "CONSUMER": {
              "NOTIFICATION": {
                "EVENT": {
                  "config": {
                    "options": {
                      "mode": 2,
                      "batchSize": 1,
                      "recursiveTimeout": 100,
                      "messageCharset": "utf8",
                      "messageAsJSON": true,
                      "sync": true,
                      "consumeTimeout": 1000
                    },
                    "rdkafkaConf": {
                      "client.id": "ml-con-notification-event",
                      "group.id": "kafka-ml-api-adapter",
                      "metadata.broker.list": "$kafka_host:$kafka_port",
                      "socket.blocking.max.ms": 1,
                      "fetch.wait.max.ms": 1,
                      "fetch.error.backoff.ms": 1,
                      "queue.buffering.max.ms": 1,
                      "broker.version.fallback": "0.10.1.0",
                      "api.version.request": true,
                      "enable.auto.commit": false,
                      "auto.commit.interval.ms": 200,
                      "socket.keepalive.enable": true,
                      "socket.max.fails": 1
                    },
                    "topicConf": {
                      "auto.offset.reset": "earliest"
                    }
                  }
                }
              }
            },
            "PRODUCER": {
              "TRANSFER": {
                "PREPARE": {
                  "config": {
                    "options": {
                      "messageCharset": "utf8"
                    },
                    "rdkafkaConf": {
                      "metadata.broker.list": "$kafka_host:$kafka_port",
                      "client.id": "ml-prod-transfer-prepare",
                      "event_cb": true,
                      "compression.codec": "none",
                      "retry.backoff.ms": 100,
                      "message.send.max.retries": 2,
                      "socket.keepalive.enable": true,
                      "socket.max.fails": 0,
                      "queue.buffering.max.messages": 10000,
                      "queue.buffering.max.ms": 50,
                      "batch.num.messages": 100,
                      "api.version.request": true,
                      "dr_cb": true
                    }
                  }
                },
                "FULFIL": {
                  "config": {
                    "options": {
                      "messageCharset": "utf8"
                    },
                    "rdkafkaConf": {
                      "metadata.broker.list": "$kafka_host:$kafka_port",
                      "client.id": "ml-prod-transfer-fulfil",
                      "event_cb": true,
                      "compression.codec": "none",
                      "retry.backoff.ms": 100,
                      "message.send.max.retries": 2,
                      "socket.keepalive.enable": true,
                      "socket.max.fails": 0,
                      "queue.buffering.max.messages": 10000,
                      "queue.buffering.max.ms": 50,
                      "batch.num.messages": 100,
                      "api.version.request": true,
                      "dr_cb": true
                    }
                  }
                }
              }
            }
          }
        }
      kafka_host: kafka
      kafka_port: 9092
    enabled: true
    global:
      config:
        affinity: {}
        nodeSelector: {}
        tolerations: []
    image:
      command: '["node", "src/handlers/index.js", "handler", "--notification"]'
      pullPolicy: Always
      repository: mojaloop/ml-api-adapter
      tag: v3.3.0-snapshot
    ingress:
      annotations:
        nginx.ingress.kubernetes.io/rewrite-target: /
      enabled: true
      externalPath: /
      hosts:
        api: ml-api-adapter.local
      tls: null
    replicaCount: 1
    resources: {}
    service:
      externalPort: 8088
      internalPort: 8088
      name: ml-api-adapter
      type: ClusterIP
  ml-api-adapter-service:
    config:
      default_json: |
        {
          "PORT": $ingress_port,
          "HOSTNAME": "$ingress_host",
          "DFSP_URLS": {
            "dfsp1": {
              "transfers": "http://localhost:1080/transfers",
              "error": "http://localhost:1080/transfers/error"
            },
            "dfsp2": {
              "transfers": "http://localhost:1080/transfers",
              "error": "http://localhost:1080/transfers/error"
            }
          },
          "AMOUNT": {
            "PRECISION": 10,
            "SCALE": 2
          },
          "HANDLERS": {
           "DISABLED": true,
           "API": {
             "DISABLED": false
           }
          },
          "KAFKA": {
            "TOPIC_TEMPLATES": {
              "PARTICIPANT_TOPIC_TEMPLATE": {
                "TEMPLATE": "topic-{{participantName}}-{{functionality}}-{{action}}",
                "REGEX": "topic-(.*)-(.*)-(.*)"
              },
              "NOTIFICATION_TOPIC_TEMPLATE": {
                "TEMPLATE": "topic-notification-event",
                "REGEX": "topic-notification-event"
              },
              "FULFIL_TOPIC_TEMPLATE": {
                "TEMPLATE": "topic-transfer-fulfil",
                "REGEX": "topic-transfer-fulfil"
              }
            },
            "CONSUMER": {
              "NOTIFICATION": {
                "EVENT": {
                  "config": {
                    "options": {
                      "mode": 2,
                      "batchSize": 1,
                      "recursiveTimeout": 100,
                      "messageCharset": "utf8",
                      "messageAsJSON": true,
                      "sync": true,
                      "consumeTimeout": 1000
                    },
                    "rdkafkaConf": {
                      "client.id": "ml-con-notification-event",
                      "group.id": "kafka-ml-api-adapter",
                      "metadata.broker.list": "$kafka_host:$kafka_port",
                      "socket.blocking.max.ms": 1,
                      "fetch.wait.max.ms": 1,
                      "fetch.error.backoff.ms": 1,
                      "queue.buffering.max.ms": 1,
                      "broker.version.fallback": "0.10.1.0",
                      "api.version.request": true,
                      "enable.auto.commit": false,
                      "auto.commit.interval.ms": 200,
                      "socket.keepalive.enable": true,
                      "socket.max.fails": 1
                    },
                    "topicConf": {
                      "auto.offset.reset": "earliest"
                    }
                  }
                }
              }
            },
            "PRODUCER": {
              "TRANSFER": {
                "PREPARE": {
                  "config": {
                    "options": {
                      "messageCharset": "utf8"
                    },
                    "rdkafkaConf": {
                      "metadata.broker.list": "$kafka_host:$kafka_port",
                      "client.id": "ml-prod-transfer-prepare",
                      "event_cb": true,
                      "compression.codec": "none",
                      "retry.backoff.ms": 100,
                      "message.send.max.retries": 2,
                      "socket.keepalive.enable": true,
                      "socket.max.fails": 0,
                      "queue.buffering.max.messages": 10000,
                      "queue.buffering.max.ms": 50,
                      "batch.num.messages": 100,
                      "api.version.request": true,
                      "dr_cb": true
                    }
                  }
                },
                "FULFIL": {
                  "config": {
                    "options": {
                      "messageCharset": "utf8"
                    },
                    "rdkafkaConf": {
                      "metadata.broker.list": "$kafka_host:$kafka_port",
                      "client.id": "ml-prod-transfer-fulfil",
                      "event_cb": true,
                      "compression.codec": "none",
                      "retry.backoff.ms": 100,
                      "message.send.max.retries": 2,
                      "socket.keepalive.enable": true,
                      "socket.max.fails": 0,
                      "queue.buffering.max.messages": 10000,
                      "queue.buffering.max.ms": 50,
                      "batch.num.messages": 100,
                      "api.version.request": true,
                      "dr_cb": true
                    }
                  }
                }
              }
            }
          }
        }
      kafka_host: kafka
      kafka_port: 9092
    enabled: true
    global:
      config:
        affinity: {}
        nodeSelector: {}
        tolerations: []
    image:
      command: '["node", "src/api/index.js"]'
      pullPolicy: Always
      repository: mojaloop/ml-api-adapter
      tag: v3.3.0-snapshot
    ingress:
      annotations:
        nginx.ingress.kubernetes.io/rewrite-target: /
      enabled: true
      externalPath: /
      hosts:
        api: ml-api-adapter.local
      tls: null
    replicaCount: 1
    resources: {}
    service:
      externalPort: 8088
      internalPort: 8088
      name: ml-api-adapter
      type: ClusterIP

HOOKS:
---
# test123-test-zj0jy
apiVersion: v1
kind: Pod
metadata:
  name: "test123-test-zj0jy"
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
  - name: pxc-test
    image: "percona/percona-xtradb-cluster:5.7.19"
    imagePullPolicy: "Always"
    command: ["bash", "/tests/run.sh"]
    env:
    - name: MYSQL_ROOT_PASSWORD
      valueFrom:
        secretKeyRef:
          name: test123-centralledger-mysql
          key: mysql-root-password
    volumeMounts:
    - mountPath: /tests
      name: tests
  volumes:
  - name: tests
    configMap:
      name: test123-centralledger-mysql-tests
  restartPolicy: Never
---
# test123-test-topic-create-consume-produce
apiVersion: v1
kind: Pod
metadata:
  name: "test123-test-topic-create-consume-produce"
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
  - name: test123-test-consume
    image: confluentinc/cp-kafka:4.0.1-1
    command:
    - sh
    - -c
    - |
      # Create the topic
      kafka-topics --zookeeper test123-zookeeper:2181 --topic helm-test-topic-create-consume-produce --create --partitions 1 --replication-factor 1 --if-not-exists && \
      # Create a message
      MESSAGE="`date -u`" && \
      # Produce a test message to the topic
      echo "$MESSAGE" | kafka-console-producer --broker-list test123-kafka:9092 --topic helm-test-topic-create-consume-produce && \
      # Consume a test message from the topic
      kafka-console-consumer --bootstrap-server test123-kafka-headless:9092 --topic helm-test-topic-create-consume-produce --from-beginning --timeout-ms 2000 --max-messages 1 | grep "$MESSAGE"
  restartPolicy: Never
MANIFEST:

---
# Source: mojaloop/charts/central/charts/centraldirectory/charts/centralenduserregistry/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: test123-centralenduserregistry-postgresql
  labels:
    app: test123-centralenduserregistry-postgresql
    chart: "postgresql-0.9.1"
    release: "test123"
    heritage: "Tiller"
type: Opaque
data:
  
  postgres-password:  "eUduVEMwN1dRNg=="
---
# Source: mojaloop/charts/central/charts/centraldirectory/charts/centralenduserregistry/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: test123-centralenduserregistry
  labels:
      app: test123-centralenduserregistry
      chart: centralenduserregistry-2.4.0
      release: test123
      heritage: Tiller
type: Opaque
data:
  # base64 encoded string
  db.uri: cG9zdGdyZXM6Ly9lbmRfdXNlcl9yZWdpc3RyeTp5R25UQzA3V1E2QHRlc3QxMjMtY2VudHJhbGVuZHVzZXJyZWdpc3RyeS1wb3N0Z3Jlc3FsOjU0MzIvY2VudHJhbF9lbmRfdXNlcl9yZWdpc3RyeQ==
---
# Source: mojaloop/charts/central/charts/centraldirectory/charts/mockpathfinder/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: test123-mockpathfinder-postgresql
  labels:
    app: test123-mockpathfinder-postgresql
    chart: "postgresql-0.9.1"
    release: "test123"
    heritage: "Tiller"
type: Opaque
data:
  
  postgres-password:  "SXlwdlhiSjFaYg=="
---
# Source: mojaloop/charts/central/charts/centraldirectory/charts/mockpathfinder/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: test123-mockpathfinder
  labels:
    app: test123-mockpathfinder
    chart: mockpathfinder-2.4.0
    release: test123
    heritage: Tiller
type: Opaque
data:
  # base64 encoded string
  db.uri: cG9zdGdyZXM6Ly9tb2NrLXBhdGhmaW5kZXI6SXlwdlhiSjFaYkB0ZXN0MTIzLW1vY2twYXRoZmluZGVyLXBvc3RncmVzcWw6NTQzMi9tb2NrX3BhdGhmaW5kZXI=
---
# Source: mojaloop/charts/central/charts/centraldirectory/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: test123-centraldirectory-postgresql
  labels:
    app: test123-centraldirectory-postgresql
    chart: "postgresql-0.9.1"
    release: "test123"
    heritage: "Tiller"
type: Opaque
data:
  
  postgres-password:  "Z1I1aEFSYnNmYQ=="
---
# Source: mojaloop/charts/central/charts/centraldirectory/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: test123-centraldirectory
  labels:
      app: test123-centraldirectory
      chart: centraldirectory-2.4.0
      release: test123
      heritage: Tiller
type: Opaque
data:
  # base64 encoded string
  db.uri: cG9zdGdyZXM6Ly9jZW50cmFsLWRpcmVjdG9yeTpnUjVoQVJic2ZhQHRlc3QxMjMtY2VudHJhbGRpcmVjdG9yeS1wb3N0Z3Jlc3FsOjU0MzIvY2VudHJhbF9kaXJlY3Rvcnk=
---
# Source: mojaloop/charts/central/charts/centralhub/charts/centralledger/charts/forensicloggingsidecar/charts/centralkms/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: test123-centralkms-postgresql
  labels:
    app: test123-centralkms-postgresql
    chart: "postgresql-0.9.1"
    release: "test123"
    heritage: "Tiller"
type: Opaque
data:
  
  postgres-password:  "eEQ4NzNJeWFRQg=="
---
# Source: mojaloop/charts/central/charts/centralhub/charts/centralledger/charts/forensicloggingsidecar/charts/centralkms/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: test123-centralkms
  labels:
      app: test123-centralkms
      chart: centralkms-2.4.0
      release: test123
      heritage: Tiller
type: Opaque
data:
  # base64 encoded string
  db.username: a21z
  # base64 encoded string
  db.password: eEQ4NzNJeWFRQg==
---
# Source: mojaloop/charts/central/charts/centralhub/charts/centralledger/charts/forensicloggingsidecar/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: test123-forensicloggingsidecar-ledger-postgresql
  labels:
    app: test123-forensicloggingsidecar-ledger-postgresql
    chart: "postgresql-0.9.1"
    release: "test123"
    heritage: "Tiller"
type: Opaque
data:
  
  postgres-password:  "V3F0MEtsa0t2TA=="
---
# Source: mojaloop/charts/central/charts/centralhub/charts/centralledger/charts/forensicloggingsidecar/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: test123-forensicloggingsidecar-ledger
  labels:
    app: test123-forensicloggingsidecar-ledger
    chart: forensicloggingsidecar-2.4.0
    release: test123
    heritage: Tiller
type: Opaque
data:
  # base64 encoded string
  db.uri: cG9zdGdyZXM6Ly9zaWRlY2FyOldxdDBLbGtLdkxAdGVzdDEyMy1mb3JlbnNpY2xvZ2dpbmdzaWRlY2FyLWxlZGdlci1wb3N0Z3Jlc3FsOjU0MzIvc2lkZWNhcg==
---
# Source: mojaloop/charts/central/charts/centralhub/charts/centralledger/charts/mysql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: test123-centralledger-mysql
  labels:
    app: test123-centralledger-mysql
    chart: "mysql-0.1.4"
    release: "test123"
    heritage: "Tiller"
type: Opaque
data:
  
  mysql-root-password: "SnlTYUJwbldCVw=="
  
  
  mysql-password:  "b3lNeGdaQ2h1dQ=="
  
  
  xtrabackup-password: "azlRNTUyQlZ0eA=="
---
# Source: mojaloop/charts/central/charts/centralhub/charts/centralledger/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: test123-centralledger-postgresql
  labels:
    app: test123-centralledger-postgresql
    chart: "postgresql-0.9.1"
    release: "test123"
    heritage: "Tiller"
type: Opaque
data:
  
  postgres-password:  "b3lNeGdaQ2h1dQ=="
---
# Source: mojaloop/charts/central/charts/centralhub/charts/centralledger/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: test123-centralledger
  labels:
      app: test123-centralledger
      chart: centralledger-2.4.0
      release: test123
      heritage: Tiller
type: Opaque
data:
  # base64 encoded string
  db.uri: bXlzcWw6Ly9jZW50cmFsX2xlZGdlcjpveU14Z1pDaHV1QHRlc3QxMjMtY2VudHJhbGxlZGdlci1teXNxbDozMzA2L2NlbnRyYWxfbGVkZ2Vy
  admin.key: YWRtaW4=
  admin.secret: YWRtaW4=
---
# Source: mojaloop/charts/interop-switch/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: test123-interop-switch-postgresql
  labels:
    app: test123-interop-switch-postgresql
    chart: "postgresql-0.9.1"
    release: "test123"
    heritage: "Tiller"
type: Opaque
data:
  
  postgres-password:  "Y1ZxOGlGcWFMdUh5OGpqS3VB"
---
# Source: mojaloop/charts/interop-switch/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: test123-interop-switch
  labels:
      app: test123-interop-switch
      chart: interop-switch-2.4.0
      release: test123
      heritage: Tiller
type: Opaque
data:
  PSQL_USER: aW50ZXJvcF9zd2l0Y2g=
  PSQL_PASSWORD: Y1ZxOGlGcWFMdUh5OGpqS3VB
---
# Source: mojaloop/charts/central/charts/centraldirectory/charts/centralenduserregistry/templates/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: test123-centralenduserregistry
  labels:
      app: test123-centralenduserregistry
      chart: centralenduserregistry-2.4.0
      release: test123
      heritage: Tiller
data:
  server.host: "central-end-user-registry.local"
  server.port: "3001"
  default.json: |
     { "PORT": 3001, "HOSTNAME": "http://central-end-user-registry.local" } 
  
  knexfile.js: |
    'use strict'

    const migrationsDirectory = '/opt/central-end-user-registry/migrations'
    const Config = require('/opt/central-end-user-registry/src/lib/config')
    module.exports = {
      client: 'pg',
      connection: Config.DATABASE_URI,
      migrations: {
        directory: migrationsDirectory,
        tableName: 'migrations',
        stub: `${migrationsDirectory}/migration.template`
      }
    }
---
# Source: mojaloop/charts/central/charts/centraldirectory/charts/mockpathfinder/templates/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: test123-mockpathfinder
  labels:
    app: test123-mockpathfinder
    chart: mockpathfinder-2.4.0
    release: test123
    heritage: Tiller
data:
  default.json: |
     { "QUERY": { "PORT": 15353, "DEFAULT_RECORD": { "order": 10, "preference": 50, "flags": "u", "service": "E2U+pstn:tel", "regexp": "!^(.*)$!tel:\\1;q_stat=102!", "replacement": "", "ttl": 900 } }, "PROVISIONING": { "PORT": 8080, "PATH": "/nrs-pi/services/SIPIX/SendRequest", "WSDL_FILE": "./sipix-2.0.0.wsdl", "DEFAULT_CUSTOMER_ID": 1234 } } 
  knexfile.js: |
    'use strict'

    const migrationsDirectory = '/opt/mock-pathfinder/migrations'
    const Config = require('/opt/mock-pathfinder/src/lib/config')

    module.exports = {
      client: 'pg',
      connection: Config.DATABASE_URI,
      migrations: {
        directory: migrationsDirectory,
        tableName: 'migrations',
        stub: `${migrationsDirectory}/migration.template`
      }
    }
---
# Source: mojaloop/charts/central/charts/centraldirectory/templates/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: test123-centraldirectory
  labels:
      app: test123-centraldirectory
      chart: centraldirectory-2.4.0
      release: test123
      heritage: Tiller
data:
  server.host: "central-directory.local"
  server.port: "3000"
  cdir.admin.key: "admin"
  cdir.admin.secret: "admin"
  cdir.pathfinder.provisioning.address: "http://test123-mockpathfinder:8080/nrs-pi/services/SIPIX/SendRequest"
  cdir.pathfinder.query.address: "test123-mockpathfinder"
  cdir.pathfinder.query.port: "15353"
  default.json: |
     { "PORT": 3000, "HOSTNAME": "http://central-directory.local", "END_USER_REGISTRY_URL": "http://test123-centralenduserregistry:3001", "SCHEME_ID": "001", "DEFAULT_DFSP": "", "ENABLE_TOKEN_AUTH": false, "PATHFINDER": { "PARTNER_ID": 10305, "SERVICE": "E2U+mm", "CACHE_TIME": 300000, "REGEX": { "PATTERN": "^.*$", "REPLACE": "mm:#{identifier}@leveloneproject.org" }, "QUERY": { "ADDRESS": "test123-mockpathfinder", "PORT": 15353, "TIMEOUT": 15000 }, "PROVISIONING": { "ADDRESS": "http://test123-mockpathfinder:8080/nrs-pi/services/SIPIX/SendRequest" } } } 
  
  knexfile.js: |
    'use strict'

    const migrationsDirectory = '/opt/central-end-user-registry/migrations'
    const Config = require('/opt/central-end-user-registry/src/lib/config')
    module.exports = {
      client: 'pg',
      connection: Config.DATABASE_URI,
      migrations: {
        directory: migrationsDirectory,
        tableName: 'migrations',
        stub: `${migrationsDirectory}/migration.template`
      }
    }
---
# Source: mojaloop/charts/central/charts/centralhub/charts/centralledger/charts/forensicloggingsidecar/charts/centralkms/templates/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: test123-centralkms
  labels:
      app: test123-centralkms
      chart: centralkms-2.4.0
      release: test123
      heritage: Tiller
data:
  db.host: "test123-centralkms-postgresql"
  db.port: "5432"
---
# Source: mojaloop/charts/central/charts/centralhub/charts/centralledger/charts/forensicloggingsidecar/templates/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: test123-forensicloggingsidecar-ledger
  labels:
    app: test123-forensicloggingsidecar-ledger
    chart: forensicloggingsidecar-2.4.0
    release: test123
    heritage: Tiller
data:
  ## The name for the sidecar service. Default: TestService
  # sidecar.name: "TestService"
  ## The port the sidecar server will run on. Default: 5678
  sidecar.port: "5678"
  ## The message batch size. Default: 64
  # sidecar.batch.side: 64
  # The url for the KMS. Default: ws://localhost:8080/sidecar
  # kms.uri: "ws://central-kms:80/sidecar"
  kms.uri: "ws://test123-centralkms:8080/sidecar"
  ## The time, in milliseconds, between pings to the KMS. Default: 30000
  # kms.ping.interval: 30000
  ## The time, in milliseconds, to timeout a request to the KMS. Default: 30000
  # kms.request.timeout: 30000
  ## The time, in milliseconds, to timeout a connection attempt to the KMS. Default: 60000
  # kms.connect.timeout: 60000
  ## TBC?
  # kms.reconnect.interval: 

  default.json: |
       { "PORT": 5678, "SERVICE": "test123-forensicloggingsidecar-ledger", "BATCH_SIZE": 64, "BATCH_TIME_INTERVAL": 300000, "KMS": { "URL": "ws://test123-centralkms:8080/sidecar", "PING_INTERVAL": 30000, "REQUEST_TIMEOUT": 90000, "CONNECT_TIMEOUT": 60000, "RECONNECT_INTERVAL": 10000 } } 

  knexfile.js: |
    'use strict'

    const migrationsDirectory = '/opt/sidecar/migrations'
    const Config = require('/opt/sidecar/src/lib/config')

    module.exports = {
      client: 'pg',
      connection: Config.DATABASE_URI,
      migrations: {
        directory: migrationsDirectory,
        tableName: 'migrations',
        stub: `${migrationsDirectory}/migration.template`
      }
    }
---
# Source: mojaloop/charts/central/charts/centralhub/charts/centralledger/charts/mysql/templates/config-map_mysql-config.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: test123-centralledger-mysql-config-files
  labels:
    app: test123-centralledger-mysql
    chart: "mysql-0.1.4"
    release: "test123"
    heritage: "Tiller"
data:
  node.cnf: |
    [mysqld]
    datadir=/var/lib/mysql
    default_storage_engine=InnoDB
    binlog_format=ROW
    innodb_flush_log_at_trx_commit  = 0
    innodb_flush_method             = O_DIRECT
    innodb_file_per_table           = 1
    innodb_autoinc_lock_mode=2
    bind_address = 0.0.0.0
    wsrep_slave_threads=2
    wsrep_cluster_address=gcomm://
    wsrep_provider=/usr/lib/galera3/libgalera_smm.so
    wsrep_cluster_name=galera
    wsrep_sst_method=xtrabackup-v2
    pxc_strict_mode=DISABLED
---
# Source: mojaloop/charts/central/charts/centralhub/charts/centralledger/charts/mysql/templates/config-map_startup-scripts.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: test123-centralledger-mysql-startup-scripts
  labels:
    app: test123-centralledger-mysql
    chart: "mysql-0.1.4"
    release: "test123"
    heritage: "Tiller"
data:
  entrypoint.sh: |
    #!/bin/bash
    set -e
    
    if [[ -n "${DEBUG}" ]]; then
        set -x
    fi
    
    . /startup-scripts/functions.sh
    
    ipaddr=$(hostname -i | awk ' { print $1 } ')
    hostname=$(hostname)
    echo "I AM $hostname - $ipaddr"
    
    # if command starts with an option, prepend mysqld
    if [ "${1:0:1}" = '-' ]; then
        CMDARG="$@"
    fi
    
    cluster_join=$(resolveip -s "${K8S_SERVICE_NAME}" || echo "")
    if [[ -z "${cluster_join}" ]]; then
        echo "I am the Primary Node"
        init_mysql
        write_password_file
        exec mysqld --user=mysql --wsrep_cluster_name=$CLUSTER_NAME --wsrep_node_name=$hostname \
        --wsrep_cluster_address=gcomm:// --wsrep_sst_method=xtrabackup-v2 \
        --wsrep_sst_auth="xtrabackup:$XTRABACKUP_PASSWORD" \
        --wsrep_node_address="$ipaddr" $CMDARG
    else
        echo "I am not the Primary Node"
        chown -R mysql:mysql /var/lib/mysql
        touch /var/log/mysqld.log
        chown mysql:mysql /var/log/mysqld.log
        write_password_file
        exec mysqld --user=mysql --wsrep_cluster_name=$CLUSTER_NAME --wsrep_node_name=$hostname \
        --wsrep_cluster_address="gcomm://$cluster_join" --wsrep_sst_method=xtrabackup-v2 \
        --wsrep_sst_auth="xtrabackup:$XTRABACKUP_PASSWORD" \
        --wsrep_node_address="$ipaddr" $CMDARG
    fi
  functions.sh: |
    #!/bin/bash
    
    write_password_file() {
    if [[ -n "${MYSQL_ROOT_PASSWORD}" ]]; then
        cat <<EOF > /root/.my.cnf
        [client]
        user=root
        password=${MYSQL_ROOT_PASSWORD}
    EOF
    fi
    }
    
    init_mysql() {
    DATADIR=/var/lib/mysql
    # if we have CLUSTER_JOIN - then we do not need to perform datadir initialize
    # the data will be copied from another node
    if [ ! -e "$DATADIR/mysql" ]; then
        if [ -z "$MYSQL_ROOT_PASSWORD" -a -z "$MYSQL_ALLOW_EMPTY_PASSWORD" -a -z "$MYSQL_RANDOM_ROOT_PASSWORD" -a -z "$MYSQL_ROOT_PASSWORD_FILE" ]; then
                            echo >&2 'error: database is uninitialized and password option is not specified '
                            echo >&2 '  You need to specify one of MYSQL_ROOT_PASSWORD, MYSQL_ROOT_PASSWORD_FILE,  MYSQL_ALLOW_EMPTY_PASSWORD or MYSQL_RANDOM_ROOT_PASSWORD'
                            exit 1
                    fi
    
        if [ ! -z "$MYSQL_ROOT_PASSWORD_FILE" -a -z "$MYSQL_ROOT_PASSWORD" ]; then
        MYSQL_ROOT_PASSWORD=$(cat $MYSQL_ROOT_PASSWORD_FILE)
        fi
        mkdir -p "$DATADIR"
    
        echo "Running --initialize-insecure on $DATADIR"
        ls -lah $DATADIR
        mysqld --initialize-insecure
        chown -R mysql:mysql "$DATADIR"
        chown mysql:mysql /var/log/mysqld.log
        echo 'Finished --initialize-insecure'
    
        mysqld --user=mysql --datadir="$DATADIR" --skip-networking &
        pid="$!"
    
        mysql=( mysql --protocol=socket -uroot )
    
        for i in {30..0}; do
        if echo 'SELECT 1' | "${mysql[@]}" &> /dev/null; then
            break
        fi
        echo 'MySQL init process in progress...'
        sleep 1
        done
        if [ "$i" = 0 ]; then
        echo >&2 'MySQL init process failed.'
        exit 1
        fi
    
        # sed is for https://bugs.mysql.com/bug.php?id=20545
        mysql_tzinfo_to_sql /usr/share/zoneinfo | sed 's/Local time zone must be set--see zic manual page/FCTY/' | "${mysql[@]}" mysql
        "${mysql[@]}" <<-EOSQL
        -- What's done in this file shouldn't be replicated
        --  or products like mysql-fabric won't work
        SET @@SESSION.SQL_LOG_BIN=0;
        CREATE USER 'root'@'${ALLOW_ROOT_FROM}' IDENTIFIED BY '${MYSQL_ROOT_PASSWORD}' ;
        GRANT ALL ON *.* TO 'root'@'${ALLOW_ROOT_FROM}' WITH GRANT OPTION ;
        ALTER USER 'root'@'localhost' IDENTIFIED BY '${MYSQL_ROOT_PASSWORD}';
        GRANT ALL ON *.* TO 'root'@'localhost' WITH GRANT OPTION ;
        CREATE USER 'xtrabackup'@'localhost' IDENTIFIED BY '$XTRABACKUP_PASSWORD';
        GRANT RELOAD,PROCESS,LOCK TABLES,REPLICATION CLIENT ON *.* TO 'xtrabackup'@'localhost';
        GRANT REPLICATION CLIENT ON *.* TO monitor@'%' IDENTIFIED BY 'monitor';
        GRANT PROCESS ON *.* TO monitor@localhost IDENTIFIED BY 'monitor';
        DROP DATABASE IF EXISTS test ;
        FLUSH PRIVILEGES ;
    EOSQL
        if [ ! -z "$MYSQL_ROOT_PASSWORD" ]; then
        mysql+=( -p"${MYSQL_ROOT_PASSWORD}" )
        fi
    
        if [ "$MYSQL_DATABASE" ]; then
        echo "CREATE DATABASE IF NOT EXISTS \`$MYSQL_DATABASE\` ;" | "${mysql[@]}"
        mysql+=( "$MYSQL_DATABASE" )
        fi
    
        if [ "$MYSQL_USER" -a "$MYSQL_PASSWORD" ]; then
        echo "CREATE USER '"$MYSQL_USER"'@'%' IDENTIFIED BY '"$MYSQL_PASSWORD"' ;" | "${mysql[@]}"
    
        if [ "$MYSQL_DATABASE" ]; then
            echo "GRANT ALL ON \`"$MYSQL_DATABASE"\`.* TO '"$MYSQL_USER"'@'%' ;" | "${mysql[@]}"
        fi
    
        echo 'FLUSH PRIVILEGES ;' | "${mysql[@]}"
        fi
    
        if [ ! -z "$MYSQL_ONETIME_PASSWORD" ]; then
        "${mysql[@]}" <<-EOSQL
            ALTER USER 'root'@'%' PASSWORD EXPIRE;
    EOSQL
        fi
        if ! kill -s TERM "$pid" || ! wait "$pid"; then
        echo >&2 'MySQL init process failed.'
        exit 1
        fi
    
        echo
        echo 'MySQL init process done. Ready for start up.'
        echo
    fi
    
    }
---
# Source: mojaloop/charts/central/charts/centralhub/charts/centralledger/charts/mysql/templates/tests/pxc-test-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: test123-centralledger-mysql-tests
data:
  run.sh: |-
    echo "Testing Percona XtraDB Cluster"
    creds="-uroot -p${MYSQL_ROOT_PASSWORD} -h test123-centralledger-mysql"
    echo "==> basic mysql ping"
    mysqladmin $creds ping
    [[ $? != "0" ]] && exit $?
    echo "==> test basic query"
    mysql $creds -e "select now() \G"
    [[ $? != "0" ]] && exit $?
    echo "==> checking if cluster is ready"
    mysql $creds -e "SHOW GLOBAL STATUS LIKE 'wsrep_ready' \G" | grep Value | awk '{ print $2}' | grep ON
    [[ $? != "0" ]] && exit $?
    echo "==> checking if cluster size matches replica count"
    cluster_size=$(mysql $creds -e "SHOW GLOBAL STATUS LIKE 'wsrep_cluster_size' \G" | grep Value | awk '{ print $2}')
    [[ $? != "0" ]] && exit $?
    [[ "${cluster_size}" == "1" ]] || exit 1
    echo "SUCCESS"
    exit 0
---
# Source: mojaloop/charts/central/charts/centralhub/charts/centralledger/templates/config.yaml
#apiVersion: v1
kind: ConfigMap
metadata:
  name: test123-centralledger
  labels:
      app: test123-centralledger
      chart: centralledger-2.4.0
      release: test123
      heritage: Tiller
data:
  server.host: http://central-ledger.local
  admin.host: http://central-ledger.local/admin
  server.port: "3000"
  admin.host: "central-ledger.local"
  admin.port: "3001"
  default.json: "{\n  \"PORT\": 3000,\n  \"ADMIN_PORT\": 3001,\n  \"HOSTNAME\": \"central-ledger.local\",\n  \"ENABLE_TOKEN_AUTH\": false,\n  \"ENABLE_BASIC_AUTH\": false,\n  \"LEDGER_ACCOUNT_NAME\": \"LedgerName\",\n  \"LEDGER_ACCOUNT_PASSWORD\": \"LedgerPassword\",\n  \"AMOUNT\": {\n    \"PRECISION\": 10,\n    \"SCALE\": 2\n  },\n  \"SIDECAR\": {\n    \"DISABLED\": false,\n    \"HOST\": \"test123-forensicloggingsidecar-ledger\",\n    \"PORT\": 5678,\n    \"CONNECT_TIMEOUT\": 45000,\n    \"RECONNECT_INTERVAL\": 5000\n  },\n  \"EMAIL_USER\": \"modusboxemailtest@gmail.com\",\n  \"EMAIL_PASSWORD\": \"April2o0%\",\n  \"EMAIL_SMTP\": \"smtp.gmail.com\",\n  \"KAFKA\": {\n    \"TOPIC_TEMPLATES\": {\n      \"PARTICIPANT_TOPIC_TEMPLATE\": {\n        \"TEMPLATE\": \"topic-{{participantName}}-{{functionality}}-{{action}}\",\n        \"REGEX\": \"topic-(.*)-(.*)-(.*)\"\n      },\n      \"GENERAL_TOPIC_TEMPLATE\": {\n        \"TEMPLATE\": \"topic-{{functionality}}-{{action}}\",\n        \"REGEX\": \"topic-(.*)-(.*)\"\n      }\n    },\n    \"CONSUMER\": {\n      \"TRANSFER\": {\n        \"PREPARE\": {\n          \"config\": {\n            \"options\": {\n              \"mode\": 2,\n              \"batchSize\": 1,\n              \"pollFrequency\": 10,\n              \"recursiveTimeout\": 100,\n              \"messageCharset\": \"utf8\",\n              \"messageAsJSON\": true,\n              \"sync\": true,\n              \"consumeTimeout\": 1000\n            },\n            \"rdkafkaConf\": {\n              \"client.id\": \"transfer-prepare\",\n              \"debug\": \"all\",\n              \"group.id\": \"central-ledger-kafka\",\n              \"metadata.broker.list\": \"test123-kafka:9092\",\n              \"enable.auto.commit\": false,\n              \"socket.keepalive.enable\": true,\n              \"socket.max.fails\": 0\n            }\n          }\n        },\n        \"TRANSFER\": {\n          \"config\": {\n            \"options\": {\n              \"mode\": 2,\n              \"batchSize\": 1,\n              \"pollFrequency\": 10,\n              \"recursiveTimeout\": 100,\n              \"messageCharset\": \"utf8\",\n              \"messageAsJSON\": true,\n              \"sync\": true,\n              \"consumeTimeout\": 1000\n            },\n            \"rdkafkaConf\": {\n              \"client.id\": \"transfer-transfer\",\n              \"debug\": \"all\",\n              \"group.id\": \"central-ledger-kafka\",\n              \"metadata.broker.list\": \"test123-kafka:9092\",\n              \"enable.auto.commit\": false,\n              \"socket.keepalive.enable\": true,\n              \"socket.max.fails\": 0\n            }\n          }\n        },\n        \"FULFIL\": {\n          \"config\": {\n            \"options\": {\n              \"mode\": 2,\n              \"batchSize\": 1,\n              \"pollFrequency\": 10,\n              \"recursiveTimeout\": 100,\n              \"messageCharset\": \"utf8\",\n              \"messageAsJSON\": true,\n              \"sync\": true,\n              \"consumeTimeout\": 1000\n            },\n            \"rdkafkaConf\": {\n              \"client.id\": \"transfer-fulfil\",\n              \"debug\": \"all\",\n              \"group.id\": \"central-ledger-kafka\",\n              \"metadata.broker.list\": \"test123-kafka:9092\",\n              \"enable.auto.commit\": false,\n              \"socket.keepalive.enable\": true,\n              \"socket.max.fails\": 0\n            }\n          }\n        },\n        \"REJECT\": {\n          \"config\": {\n            \"options\": {\n              \"mode\": 2,\n              \"batchSize\": 1,\n              \"pollFrequency\": 10,\n              \"recursiveTimeout\": 100,\n              \"messageCharset\": \"utf8\",\n              \"messageAsJSON\": true,\n              \"sync\": true,\n              \"consumeTimeout\": 1000\n            },\n            \"rdkafkaConf\": {\n              \"client.id\": \"transfer-reject\",\n              \"debug\": \"all\",\n              \"group.id\": \"central-ledger-kafka\",\n              \"metadata.broker.list\": \"test123-kafka:9092\",\n              \"enable.auto.commit\": false,\n              \"socket.keepalive.enable\": true,\n              \"socket.max.fails\": 0\n            }\n          }\n        }\n      },\n      \"POSITION\": {\n        \"PREPARE\": {\n          \"config\": {\n            \"options\": {\n              \"mode\": 2,\n              \"batchSize\": 1,\n              \"pollFrequency\": 10,\n              \"recursiveTimeout\": 100,\n              \"messageCharset\": \"utf8\",\n              \"messageAsJSON\": true,\n              \"sync\": true,\n              \"consumeTimeout\": 1000\n            },\n            \"rdkafkaConf\": {\n              \"client.id\": \"position-prepare\",\n              \"debug\": \"all\",\n              \"group.id\": \"central-ledger-kafka\",\n              \"metadata.broker.list\": \"test123-kafka:9092\",\n              \"enable.auto.commit\": false,\n              \"socket.keepalive.enable\": true,\n              \"socket.max.fails\": 0\n            }\n          }\n        }\n      },\n      \"NOTIFICATION\": {\n        \"EVENT\": {\n          \"config\": {\n            \"options\": {\n              \"mode\": 2,\n              \"batchSize\": 1,\n              \"pollFrequency\": 10,\n              \"recursiveTimeout\": 100,\n              \"messageCharset\": \"utf8\",\n              \"messageAsJSON\": true,\n              \"sync\": true,\n              \"consumeTimeout\": 1000\n            },\n            \"rdkafkaConf\": {\n              \"client.id\": \"notification-event\",\n              \"debug\": \"all\",\n              \"group.id\": \"central-ledger-kafka\",\n              \"metadata.broker.list\": \"test123-kafka:9092\",\n              \"enable.auto.commit\": false,\n              \"socket.keepalive.enable\": true,\n              \"socket.max.fails\": 0\n            }\n          }\n        }\n      }\n    },\n    \"PRODUCER\": {\n      \"TRANSFER\": {\n        \"PREPARE\": {\n          \"config\": {\n            \"options\": {\n              \"messageCharset\": \"utf8\"\n            },\n            \"rdkafkaConf\": {\n              \"debug\": \"all\",\n              \"metadata.broker.list\": \"test123-kafka:9092\",\n              \"client.id\": \"default-client\",\n              \"event_cb\": true,\n              \"compression.codec\": \"none\",\n              \"retry.backoff.ms\": 100,\n              \"message.send.max.retries\": 2,\n              \"socket.keepalive.enable\": true,\n              \"queue.buffering.max.messages\": 10,\n              \"queue.buffering.max.ms\": 50,\n              \"batch.num.messages\": 100,\n              \"api.version.request\": true,\n              \"dr_cb\": true,\n              \"socket.keepalive.enable\": true,\n              \"socket.max.fails\": 0\n            }\n          }\n        },\n        \"FULFIL\": {\n          \"config\": {\n            \"options\": {\n              \"messageCharset\": \"utf8\"\n            },\n            \"rdkafkaConf\": {\n              \"debug\": \"all\",\n              \"metadata.broker.list\": \"test123-kafka:9092\",\n              \"client.id\": \"default-client\",\n              \"event_cb\": true,\n              \"compression.codec\": \"none\",\n              \"retry.backoff.ms\": 100,\n              \"message.send.max.retries\": 2,\n              \"socket.keepalive.enable\": true,\n              \"queue.buffering.max.messages\": 10,\n              \"queue.buffering.max.ms\": 50,\n              \"batch.num.messages\": 100,\n              \"api.version.request\": true,\n              \"dr_cb\": true,\n              \"socket.keepalive.enable\": true,\n              \"socket.max.fails\": 0\n            }\n          }\n        },\n        \"REJECT\": {\n          \"config\": {\n            \"options\": {\n              \"messageCharset\": \"utf8\"\n            },\n            \"rdkafkaConf\": {\n              \"debug\": \"all\",\n              \"metadata.broker.list\": \"test123-kafka:9092\",\n              \"client.id\": \"default-client\",\n              \"event_cb\": true,\n              \"compression.codec\": \"none\",\n              \"retry.backoff.ms\": 100,\n              \"message.send.max.retries\": 2,\n              \"socket.keepalive.enable\": true,\n              \"queue.buffering.max.messages\": 10,\n              \"queue.buffering.max.ms\": 50,\n              \"batch.num.messages\": 100,\n              \"api.version.request\": true,\n              \"dr_cb\": true,\n              \"socket.keepalive.enable\": true,\n              \"socket.max.fails\": 0\n            }\n          }\n        },\n        \"TRANSFER\": {\n          \"config\": {\n            \"options\": {\n              \"messageCharset\": \"utf8\"\n            },\n            \"rdkafkaConf\": {\n              \"debug\": \"all\",\n              \"metadata.broker.list\": \"test123-kafka:9092\",\n              \"client.id\": \"default-client\",\n              \"event_cb\": true,\n              \"compression.codec\": \"none\",\n              \"retry.backoff.ms\": 100,\n              \"message.send.max.retries\": 2,\n              \"socket.keepalive.enable\": true,\n              \"queue.buffering.max.messages\": 10,\n              \"queue.buffering.max.ms\": 50,\n              \"batch.num.messages\": 100,\n              \"api.version.request\": true,\n              \"dr_cb\": true,\n              \"socket.keepalive.enable\": true,\n              \"socket.max.fails\": 0\n            }\n          }\n        }\n      },\n      \"POSITION\": {\n        \"PREPARE\": {\n          \"config\": {\n            \"options\": {\n              \"messageCharset\": \"utf8\"\n            },\n            \"rdkafkaConf\": {\n              \"debug\": \"all\",\n              \"metadata.broker.list\": \"test123-kafka:9092\",\n              \"client.id\": \"default-client\",\n              \"event_cb\": true,\n              \"compression.codec\": \"none\",\n              \"retry.backoff.ms\": 100,\n              \"message.send.max.retries\": 2,\n              \"socket.keepalive.enable\": true,\n              \"queue.buffering.max.messages\": 10,\n              \"queue.buffering.max.ms\": 50,\n              \"batch.num.messages\": 100,\n              \"api.version.request\": true,\n              \"dr_cb\": true,\n              \"socket.keepalive.enable\": true,\n              \"socket.max.fails\": 0\n            }\n          }\n        }\n      },\n      \"NOTIFICATION\": {\n        \"EVENT\": {\n          \"config\": {\n            \"options\": {\n              \"messageCharset\": \"utf8\"\n            },\n            \"rdkafkaConf\": {\n              \"debug\": \"all\",\n              \"metadata.broker.list\": \"test123-kafka:9092\",\n              \"client.id\": \"default-client\",\n              \"event_cb\": true,\n              \"compression.codec\": \"none\",\n              \"retry.backoff.ms\": 100,\n              \"message.send.max.retries\": 2,\n              \"socket.keepalive.enable\": true,\n              \"queue.buffering.max.messages\": 10,\n              \"queue.buffering.max.ms\": 50,\n              \"batch.num.messages\": 100,\n              \"api.version.request\": true,\n              \"dr_cb\": true,\n              \"socket.keepalive.enable\": true,\n              \"socket.max.fails\": 0\n            }\n          }\n        }\n      }\n    }\n  }\n}\n"
  knexfile.js: "'use strict'\n\nconst migrationsDirectory = '/opt/central-ledger/migrations'\nconst seedsDirectory = '/opt/central-ledger/seeds'\n\nconst Config = require('/opt/central-ledger/src/lib/config')\n\nmodule.exports = {\n  client: 'mysql',\n  connection: Config.DATABASE_URI,\n  migrations: {\n    directory: migrationsDirectory,\n    tableName: 'migration',\n    stub: `${migrationsDirectory}/migration.template`\n  },\n  seeds: {\n    directory: seedsDirectory,\n    loadExtensions: ['.js']\n  }\n}\n"
---
# Source: mojaloop/charts/central/charts/centralhub/templates/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: test123-centralhub
  labels:
      app: test123-centralhub
      chart: centralhub-2.4.0
      release: test123
      heritage: Tiller
data:
  default.json: |
     { "PORT": "4001", "HOSTNAME": "http://central-hub.local", "API_URL": "http://test123-centralledger:3000", "ADMIN_API_URL": "http://test123-centralledger:3001" }
---
# Source: mojaloop/charts/interop-switch/templates/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: test123-interop-switch
  labels:
      app: test123-interop-switch
      chart: interop-switch-2.4.0
      release: test123
      heritage: Tiller
data:
  SWITCH_SERVICE_HOST: "0.0.0.0"
  SWITCH_SERVICE_PORT: "8088"
  CENTRAL_DIR_HOST: "test123-centraldirectory"
  CENTRAL_DIR_PORT: "3000"
  CONNECTOR_HOST: "test123-interop-connector"
  PSQL_HOST: "test123-interop-switch-postgresql"
  PSQL_PORT: "5432"
  PSQL_DATABASE: "interop_switch"
  ML_API_ADAPTER_HOST: "ml-api-adapter"
  ML_API_ADAPTER_PORT: "80"
---
# Source: mojaloop/charts/ml-api-adapter/charts/ml-api-adapter-handler-notification/templates/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: test123-ml-api-adapter-handler-notification
  labels:
      app: test123-ml-api-adapter-handler-notification
      chart: ml-api-adapter-handler-notification-3.4.0
      release: test123
      heritage: Tiller
data:
  default.json: "{\n  \"PORT\": 8088,\n  \"HOSTNAME\": \"ml-api-adapter.local\",\n  \"DFSP_URLS\": {\n    \"dfsp1\": {\n      \"transfers\": \"http://localhost:1080/transfers\",\n      \"error\": \"http://localhost:1080/transfers/error\"\n    },\n    \"dfsp2\": {\n      \"transfers\": \"http://localhost:1080/transfers\",\n      \"error\": \"http://localhost:1080/transfers/error\"\n    }\n  },\n  \"AMOUNT\": {\n    \"PRECISION\": 10,\n    \"SCALE\": 2\n  },\n  \"HANDLERS\": {\n   \"DISABLED\": false,\n   \"API\": {\n     \"DISABLED\": false\n   }\n  },\n  \"KAFKA\": {\n    \"TOPIC_TEMPLATES\": {\n      \"PARTICIPANT_TOPIC_TEMPLATE\": {\n        \"TEMPLATE\": \"topic-{{participantName}}-{{functionality}}-{{action}}\",\n        \"REGEX\": \"topic-(.*)-(.*)-(.*)\"\n      },\n      \"NOTIFICATION_TOPIC_TEMPLATE\": {\n        \"TEMPLATE\": \"topic-notification-event\",\n        \"REGEX\": \"topic-notification-event\"\n      },\n      \"FULFIL_TOPIC_TEMPLATE\": {\n        \"TEMPLATE\": \"topic-transfer-fulfil\",\n        \"REGEX\": \"topic-transfer-fulfil\"\n      }\n    },\n    \"CONSUMER\": {\n      \"NOTIFICATION\": {\n        \"EVENT\": {\n          \"config\": {\n            \"options\": {\n              \"mode\": 2,\n              \"batchSize\": 1,\n              \"recursiveTimeout\": 100,\n              \"messageCharset\": \"utf8\",\n              \"messageAsJSON\": true,\n              \"sync\": true,\n              \"consumeTimeout\": 1000\n            },\n            \"rdkafkaConf\": {\n              \"client.id\": \"ml-con-notification-event\",\n              \"group.id\": \"kafka-ml-api-adapter\",\n              \"metadata.broker.list\": \"test123-kafka:9092\",\n              \"socket.blocking.max.ms\": 1,\n              \"fetch.wait.max.ms\": 1,\n              \"fetch.error.backoff.ms\": 1,\n              \"queue.buffering.max.ms\": 1,\n              \"broker.version.fallback\": \"0.10.1.0\",\n              \"api.version.request\": true,\n              \"enable.auto.commit\": false,\n              \"auto.commit.interval.ms\": 200,\n              \"socket.keepalive.enable\": true,\n              \"socket.max.fails\": 1\n            },\n            \"topicConf\": {\n              \"auto.offset.reset\": \"earliest\"\n            }\n          }\n        }\n      }\n    },\n    \"PRODUCER\": {\n      \"TRANSFER\": {\n        \"PREPARE\": {\n          \"config\": {\n            \"options\": {\n              \"messageCharset\": \"utf8\"\n            },\n            \"rdkafkaConf\": {\n              \"metadata.broker.list\": \"test123-kafka:9092\",\n              \"client.id\": \"ml-prod-transfer-prepare\",\n              \"event_cb\": true,\n              \"compression.codec\": \"none\",\n              \"retry.backoff.ms\": 100,\n              \"message.send.max.retries\": 2,\n              \"socket.keepalive.enable\": true,\n              \"socket.max.fails\": 0,\n              \"queue.buffering.max.messages\": 10000,\n              \"queue.buffering.max.ms\": 50,\n              \"batch.num.messages\": 100,\n              \"api.version.request\": true,\n              \"dr_cb\": true\n            }\n          }\n        },\n        \"FULFIL\": {\n          \"config\": {\n            \"options\": {\n              \"messageCharset\": \"utf8\"\n            },\n            \"rdkafkaConf\": {\n              \"metadata.broker.list\": \"test123-kafka:9092\",\n              \"client.id\": \"ml-prod-transfer-fulfil\",\n              \"event_cb\": true,\n              \"compression.codec\": \"none\",\n              \"retry.backoff.ms\": 100,\n              \"message.send.max.retries\": 2,\n              \"socket.keepalive.enable\": true,\n              \"socket.max.fails\": 0,\n              \"queue.buffering.max.messages\": 10000,\n              \"queue.buffering.max.ms\": 50,\n              \"batch.num.messages\": 100,\n              \"api.version.request\": true,\n              \"dr_cb\": true\n            }\n          }\n        }\n      }\n    }\n  }\n}\n"
---
# Source: mojaloop/charts/ml-api-adapter/charts/ml-api-adapter-service/templates/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: test123-ml-api-adapter-service
  labels:
      app: test123-ml-api-adapter-service
      chart: ml-api-adapter-service-3.4.0
      release: test123
      heritage: Tiller
data:
  default.json: "{\n  \"PORT\": 8088,\n  \"HOSTNAME\": \"ml-api-adapter.local\",\n  \"DFSP_URLS\": {\n    \"dfsp1\": {\n      \"transfers\": \"http://localhost:1080/transfers\",\n      \"error\": \"http://localhost:1080/transfers/error\"\n    },\n    \"dfsp2\": {\n      \"transfers\": \"http://localhost:1080/transfers\",\n      \"error\": \"http://localhost:1080/transfers/error\"\n    }\n  },\n  \"AMOUNT\": {\n    \"PRECISION\": 10,\n    \"SCALE\": 2\n  },\n  \"HANDLERS\": {\n   \"DISABLED\": true,\n   \"API\": {\n     \"DISABLED\": false\n   }\n  },\n  \"KAFKA\": {\n    \"TOPIC_TEMPLATES\": {\n      \"PARTICIPANT_TOPIC_TEMPLATE\": {\n        \"TEMPLATE\": \"topic-{{participantName}}-{{functionality}}-{{action}}\",\n        \"REGEX\": \"topic-(.*)-(.*)-(.*)\"\n      },\n      \"NOTIFICATION_TOPIC_TEMPLATE\": {\n        \"TEMPLATE\": \"topic-notification-event\",\n        \"REGEX\": \"topic-notification-event\"\n      },\n      \"FULFIL_TOPIC_TEMPLATE\": {\n        \"TEMPLATE\": \"topic-transfer-fulfil\",\n        \"REGEX\": \"topic-transfer-fulfil\"\n      }\n    },\n    \"CONSUMER\": {\n      \"NOTIFICATION\": {\n        \"EVENT\": {\n          \"config\": {\n            \"options\": {\n              \"mode\": 2,\n              \"batchSize\": 1,\n              \"recursiveTimeout\": 100,\n              \"messageCharset\": \"utf8\",\n              \"messageAsJSON\": true,\n              \"sync\": true,\n              \"consumeTimeout\": 1000\n            },\n            \"rdkafkaConf\": {\n              \"client.id\": \"ml-con-notification-event\",\n              \"group.id\": \"kafka-ml-api-adapter\",\n              \"metadata.broker.list\": \"test123-kafka:9092\",\n              \"socket.blocking.max.ms\": 1,\n              \"fetch.wait.max.ms\": 1,\n              \"fetch.error.backoff.ms\": 1,\n              \"queue.buffering.max.ms\": 1,\n              \"broker.version.fallback\": \"0.10.1.0\",\n              \"api.version.request\": true,\n              \"enable.auto.commit\": false,\n              \"auto.commit.interval.ms\": 200,\n              \"socket.keepalive.enable\": true,\n              \"socket.max.fails\": 1\n            },\n            \"topicConf\": {\n              \"auto.offset.reset\": \"earliest\"\n            }\n          }\n        }\n      }\n    },\n    \"PRODUCER\": {\n      \"TRANSFER\": {\n        \"PREPARE\": {\n          \"config\": {\n            \"options\": {\n              \"messageCharset\": \"utf8\"\n            },\n            \"rdkafkaConf\": {\n              \"metadata.broker.list\": \"test123-kafka:9092\",\n              \"client.id\": \"ml-prod-transfer-prepare\",\n              \"event_cb\": true,\n              \"compression.codec\": \"none\",\n              \"retry.backoff.ms\": 100,\n              \"message.send.max.retries\": 2,\n              \"socket.keepalive.enable\": true,\n              \"socket.max.fails\": 0,\n              \"queue.buffering.max.messages\": 10000,\n              \"queue.buffering.max.ms\": 50,\n              \"batch.num.messages\": 100,\n              \"api.version.request\": true,\n              \"dr_cb\": true\n            }\n          }\n        },\n        \"FULFIL\": {\n          \"config\": {\n            \"options\": {\n              \"messageCharset\": \"utf8\"\n            },\n            \"rdkafkaConf\": {\n              \"metadata.broker.list\": \"test123-kafka:9092\",\n              \"client.id\": \"ml-prod-transfer-fulfil\",\n              \"event_cb\": true,\n              \"compression.codec\": \"none\",\n              \"retry.backoff.ms\": 100,\n              \"message.send.max.retries\": 2,\n              \"socket.keepalive.enable\": true,\n              \"socket.max.fails\": 0,\n              \"queue.buffering.max.messages\": 10000,\n              \"queue.buffering.max.ms\": 50,\n              \"batch.num.messages\": 100,\n              \"api.version.request\": true,\n              \"dr_cb\": true\n            }\n          }\n        }\n      }\n    }\n  }\n}\n"
---
# Source: mojaloop/charts/central/charts/centralhub/charts/centralledger/charts/kafka/templates/rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: test123
  namespace: test123
---
# Source: mojaloop/charts/central/charts/centralhub/charts/centralledger/charts/kafka/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  name: test123
  namespace: test123
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - patch
---
# Source: mojaloop/charts/central/charts/centralhub/charts/centralledger/charts/kafka/templates/rbac.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: test123
roleRef:
  kind: Role
  name: test123
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: test123
  namespace: test123
---
# Source: mojaloop/charts/central/charts/centraldirectory/charts/centralenduserregistry/charts/postgresql/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: test123-centralenduserregistry-postgresql
  labels:
    app: test123-centralenduserregistry-postgresql
    chart: "postgresql-0.9.1"
    release: "test123"
    heritage: "Tiller"
spec:
  type: ClusterIP
  ports:
  - name: postgresql
    port: 5432
    targetPort: postgresql
  selector:
    app: test123-centralenduserregistry-postgresql
---
# Source: mojaloop/charts/central/charts/centraldirectory/charts/centralenduserregistry/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: test123-centralenduserregistry
  labels:
    app: test123-centralenduserregistry
    chart: centralenduserregistry-2.4.0
    release: test123
    heritage: Tiller
  annotations:
spec:
  type: ClusterIP
  ports:
    - port: 3001
      targetPort: 3001
      protocol: TCP
      name: http-api
  selector:
    app: test123-centralenduserregistry
    release: test123
---
# Source: mojaloop/charts/central/charts/centraldirectory/charts/mockpathfinder/charts/postgresql/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: test123-mockpathfinder-postgresql
  labels:
    app: test123-mockpathfinder-postgresql
    chart: "postgresql-0.9.1"
    release: "test123"
    heritage: "Tiller"
spec:
  type: ClusterIP
  ports:
  - name: postgresql
    port: 5432
    targetPort: postgresql
  selector:
    app: test123-mockpathfinder-postgresql
---
# Source: mojaloop/charts/central/charts/centraldirectory/charts/mockpathfinder/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: test123-mockpathfinder
  labels:
    app: test123-mockpathfinder
    chart: mockpathfinder-2.4.0
    release: test123
    heritage: Tiller
  annotations:
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: 8080
      protocol: TCP
      name: tcp-prov
    - port: 15353
      targetPort: 15353
      protocol: TCP
      name: tcp-query
    - port: 15353
      targetPort: 15353
      protocol: UDP
      name: udp-query
  selector:
    app: test123-mockpathfinder
    release: test123
---
# Source: mojaloop/charts/central/charts/centraldirectory/charts/postgresql/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: test123-centraldirectory-postgresql
  labels:
    app: test123-centraldirectory-postgresql
    chart: "postgresql-0.9.1"
    release: "test123"
    heritage: "Tiller"
spec:
  type: ClusterIP
  ports:
  - name: postgresql
    port: 5432
    targetPort: postgresql
  selector:
    app: test123-centraldirectory-postgresql
---
# Source: mojaloop/charts/central/charts/centraldirectory/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: test123-centraldirectory
  labels:
    app: test123-centraldirectory
    chart: centraldirectory-2.4.0
    release: test123
    heritage: Tiller
  annotations:
spec:
  type: ClusterIP
  ports:
    - port: 3000
      targetPort: 3000
      protocol: TCP
      name: http-api
  selector:
    app: test123-centraldirectory
    release: test123
---
# Source: mojaloop/charts/central/charts/centralhub/charts/centralledger/charts/forensicloggingsidecar/charts/centralkms/charts/postgresql/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: test123-centralkms-postgresql
  labels:
    app: test123-centralkms-postgresql
    chart: "postgresql-0.9.1"
    release: "test123"
    heritage: "Tiller"
spec:
  type: ClusterIP
  ports:
  - name: postgresql
    port: 5432
    targetPort: postgresql
  selector:
    app: test123-centralkms-postgresql
---
# Source: mojaloop/charts/central/charts/centralhub/charts/centralledger/charts/forensicloggingsidecar/charts/centralkms/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: test123-centralkms
  labels:
    app: test123-centralkms
    chart: centralkms-2.4.0
    release: test123
    heritage: Tiller
  annotations:
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: 8080
      protocol: TCP
      name: 
  selector:
    app: test123-centralkms
    release: test123
---
# Source: mojaloop/charts/central/charts/centralhub/charts/centralledger/charts/forensicloggingsidecar/charts/postgresql/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: test123-forensicloggingsidecar-ledger-postgresql
  labels:
    app: test123-forensicloggingsidecar-ledger-postgresql
    chart: "postgresql-0.9.1"
    release: "test123"
    heritage: "Tiller"
spec:
  type: ClusterIP
  ports:
  - name: postgresql
    port: 5432
    targetPort: postgresql
  selector:
    app: test123-forensicloggingsidecar-ledger-postgresql
---
# Source: mojaloop/charts/central/charts/centralhub/charts/centralledger/charts/forensicloggingsidecar/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: test123-forensicloggingsidecar-ledger
  labels:
    app: test123-forensicloggingsidecar-ledger
    chart: forensicloggingsidecar-2.4.0
    release: test123
    heritage: Tiller
  annotations:
spec:
  type: ClusterIP
  ports:
    - port: 5678
      targetPort: 5678
      protocol: TCP
      name: 
  selector:
    app: test123-forensicloggingsidecar-ledger
    release: test123
---
# Source: mojaloop/charts/central/charts/centralhub/charts/centralledger/charts/kafka/charts/zookeeper/templates/service-clients.yaml
apiVersion: v1
kind: Service
metadata:
  name: test123-zookeeper
  labels:
    app: "zookeeper"
    chart: "zookeeper-0.5.0"
    release: "test123"
    heritage: "Tiller"
spec:
  ports:
  - port: 2181
    name: client
  selector:
    app: "zookeeper"
    release: "test123"
---
# Source: mojaloop/charts/central/charts/centralhub/charts/centralledger/charts/kafka/charts/zookeeper/templates/service-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: test123-zookeeper-headless
  labels:
    app: "zookeeper"
    chart: "zookeeper-0.5.0"
    release: "test123"
    heritage: "Tiller"
spec:
  ports:
  - port: 2888
    name: server
  - port: 3888
    name: leader-election
  clusterIP: None
  selector:
    app: "zookeeper"
    release: "test123"
---
# Source: mojaloop/charts/central/charts/centralhub/charts/centralledger/charts/kafka/templates/service-brokers.yaml
apiVersion: v1
kind: Service
metadata:
  name: test123-kafka
  labels:
    app: kafka
    chart: kafka-0.7.2
    release: test123
    heritage: Tiller
spec:
  ports:
  - name: broker
    port: 9092
  selector:
    app: kafka
    release: test123
---
# Source: mojaloop/charts/central/charts/centralhub/charts/centralledger/charts/kafka/templates/service-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: test123-kafka-headless
  labels:
    app: kafka
    chart: kafka-0.7.2
    release: test123
    heritage: Tiller
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  ports:
  - name: broker
    port: 9092
  clusterIP: None
  selector:
    app: kafka
    release: test123
---
# Source: mojaloop/charts/central/charts/centralhub/charts/centralledger/charts/mysql/templates/service-percona.yaml
apiVersion: v1
kind: Service
metadata:
  name: test123-centralledger-mysql
  labels:
    app: test123-centralledger-mysql
    chart: "mysql-0.1.4"
    release: "test123"
    heritage: "Tiller"
spec:
  ports:
  - name: mysql
    port: 3306
    targetPort: mysql
  selector:
    app: test123-centralledger-mysql
    release: "test123"
---
# Source: mojaloop/charts/central/charts/centralhub/charts/centralledger/charts/mysql/templates/service-repl.yaml
apiVersion: v1
kind: Service
metadata:
  name: "test123-centralledger-mysql-repl"
  labels:
    app: test123-centralledger-mysql
    chart: "mysql-0.1.4"
    release: "test123"
    heritage: "Tiller"
spec:
  clusterIP: None
  ports:
  - name: galera
    port: 4567
  - name: state-xfer
    port: 4568
  - name: state-snap
    port: 4444
  selector:
    app: test123-centralledger-mysql
    release: "test123"
---
# Source: mojaloop/charts/central/charts/centralhub/charts/centralledger/charts/postgresql/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: test123-centralledger-postgresql
  labels:
    app: test123-centralledger-postgresql
    chart: "postgresql-0.9.1"
    release: "test123"
    heritage: "Tiller"
spec:
  type: ClusterIP
  ports:
  - name: postgresql
    port: 5432
    targetPort: postgresql
  selector:
    app: test123-centralledger-postgresql
---
# Source: mojaloop/charts/central/charts/centralhub/charts/centralledger/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: test123-centralledger
  labels:
    app: test123-centralledger
    chart: centralledger-2.4.0
    release: test123
    heritage: Tiller
  annotations:
spec:
  type: ClusterIP
  ports:
    - port: 3000
      targetPort: 3000
      protocol: TCP
      name: http-api
    - port: 3001
      targetPort: 3001
      protocol: TCP
      name: http-api-admin
  selector:
    app: test123-centralledger
    release: test123
---
# Source: mojaloop/charts/central/charts/centralhub/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: test123-centralhub
  labels:
    app: test123-centralhub
    chart: centralhub-2.4.0
    release: test123
    heritage: Tiller
  annotations:
spec:
  type: ClusterIP
  ports:
    - port: 4001
      targetPort: 4001
      protocol: TCP
      name: 
  selector:
    app: test123-centralhub
    release: test123
---
# Source: mojaloop/charts/interop-switch/charts/postgresql/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: test123-interop-switch-postgresql
  labels:
    app: test123-interop-switch-postgresql
    chart: "postgresql-0.9.1"
    release: "test123"
    heritage: "Tiller"
spec:
  type: ClusterIP
  ports:
  - name: postgresql
    port: 5432
    targetPort: postgresql
  selector:
    app: test123-interop-switch-postgresql
---
# Source: mojaloop/charts/interop-switch/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: test123-interop-switch
  labels:
    app: test123-interop-switch
    chart: interop-switch-2.4.0
    release: test123
    heritage: Tiller
spec:
  type: ClusterIP
  ports:
    - port: 8088
      targetPort: 8088
      protocol: TCP
      name: interop-switch
  selector:
    app: test123-interop-switch
    release: test123
---
# Source: mojaloop/charts/ml-api-adapter/charts/ml-api-adapter-handler-notification/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: test123-ml-api-adapter-handler-notification
  labels:
    app: test123-ml-api-adapter-handler-notification
    chart: ml-api-adapter-handler-notification-3.4.0
    release: test123
    heritage: Tiller
spec:
  type: ClusterIP
  ports:
    - port: 8088
      targetPort: 8088
      protocol: TCP
      name: ml-api-adapter
  selector:
    app: test123-ml-api-adapter-handler-notification
    release: test123
---
# Source: mojaloop/charts/ml-api-adapter/charts/ml-api-adapter-service/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: test123-ml-api-adapter-service
  labels:
    app: test123-ml-api-adapter-service
    chart: ml-api-adapter-service-3.4.0
    release: test123
    heritage: Tiller
spec:
  type: ClusterIP
  ports:
    - port: 8088
      targetPort: 8088
      protocol: TCP
      name: ml-api-adapter
  selector:
    app: test123-ml-api-adapter-service
    release: test123
---
# Source: mojaloop/charts/central/charts/centraldirectory/charts/centralenduserregistry/charts/postgresql/templates/deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: test123-centralenduserregistry-postgresql
  labels:
    app: test123-centralenduserregistry-postgresql
    chart: "postgresql-0.9.1"
    release: "test123"
    heritage: "Tiller"
spec:
  template:
    metadata:
      labels:
        app: test123-centralenduserregistry-postgresql
    spec:
      containers:
      - name: test123-centralenduserregistry-postgresql
        image: "postgres:9.6.2"
        imagePullPolicy: ""
        args:
        env:
        - name: POSTGRES_USER
          value: "end_user_registry"
          # Required for pg_isready in the health probes.
        - name: PGUSER
          value: "end_user_registry"
        - name: POSTGRES_DB
          value: "central_end_user_registry"
        - name: POSTGRES_INITDB_ARGS
          value: ""
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: test123-centralenduserregistry-postgresql
              key: postgres-password
        - name: POD_IP
          valueFrom: { fieldRef: { fieldPath: status.podIP } }
        ports:
        - name: postgresql
          containerPort: 5432
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - exec pg_isready --host $POD_IP
          initialDelaySeconds: 120
          timeoutSeconds: 5
          failureThreshold: 6
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - exec pg_isready --host $POD_IP
          initialDelaySeconds: 5
          timeoutSeconds: 3
          periodSeconds: 5
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          
        volumeMounts:
        - name: data
          mountPath: /var/lib/postgresql/data/pgdata
          subPath: postgresql-db
      volumes:
      - name: data
        emptyDir: {}
---
# Source: mojaloop/charts/central/charts/centraldirectory/charts/centralenduserregistry/templates/deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: test123-centralenduserregistry
  labels:
    app: test123-centralenduserregistry
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: test123-centralenduserregistry
        chart: centralenduserregistry-2.4.0
        release: test123
        heritage: Tiller
    spec:
      initContainers:
        - name: wait-for-postgres
          image: bowerswilkins/awaitpostgres
          imagePullPolicy: Always
          env:
          - name: "POSTGRES_URL"
            value: "postgresql://end_user_registry:yGnTC07WQ6@test123-centralenduserregistry-postgresql:5432/central_end_user_registry?sslmode=disable"
      containers:
        - name: centralenduserregistry
          image: "mojaloop/central-end-user-registry:v2.4"
          imagePullPolicy: Always
          ports:
            - name: http-api
              containerPort: 3001
          readinessProbe:
            httpGet:
              path: /health
              port: 3001
            initialDelaySeconds: 45
            periodSeconds: 15
          livenessProbe:
            httpGet:
              path: /health
              port: 3001
            initialDelaySeconds: 45
            periodSeconds: 15
          # securityContext:
          #   capabilities:
          #     add:
          #       - NET_ADMIN
          env:
            - name: CREG_HOSTNAME
              valueFrom:
                configMapKeyRef:
                  name: test123-centralenduserregistry
                  key: server.host
            - name: CREG_PORT
              valueFrom:
                configMapKeyRef:
                  name: test123-centralenduserregistry
                  key: server.port
            - name: CREG_DATABASE_URI
              valueFrom:
                secretKeyRef:
                  name: test123-centralenduserregistry
                  key: db.uri
          volumeMounts:
          - name: test123-centralenduserregistry-config-volume
            mountPath: /opt/mock-pathfinder/config
      volumes:
        - name: test123-centralenduserregistry-config-volume
          configMap:
            name: test123-centralenduserregistry
            items:
            - key: default.json
              path: default.json
            - key: knexfile.js
              path: knexfile.js
---
# Source: mojaloop/charts/central/charts/centraldirectory/charts/mockpathfinder/charts/postgresql/templates/deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: test123-mockpathfinder-postgresql
  labels:
    app: test123-mockpathfinder-postgresql
    chart: "postgresql-0.9.1"
    release: "test123"
    heritage: "Tiller"
spec:
  template:
    metadata:
      labels:
        app: test123-mockpathfinder-postgresql
    spec:
      containers:
      - name: test123-mockpathfinder-postgresql
        image: "postgres:9.6.2"
        imagePullPolicy: ""
        args:
        env:
        - name: POSTGRES_USER
          value: "mock-pathfinder"
          # Required for pg_isready in the health probes.
        - name: PGUSER
          value: "mock-pathfinder"
        - name: POSTGRES_DB
          value: "mock_pathfinder"
        - name: POSTGRES_INITDB_ARGS
          value: ""
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: test123-mockpathfinder-postgresql
              key: postgres-password
        - name: POD_IP
          valueFrom: { fieldRef: { fieldPath: status.podIP } }
        ports:
        - name: postgresql
          containerPort: 5432
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - exec pg_isready --host $POD_IP
          initialDelaySeconds: 120
          timeoutSeconds: 5
          failureThreshold: 6
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - exec pg_isready --host $POD_IP
          initialDelaySeconds: 5
          timeoutSeconds: 3
          periodSeconds: 5
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          
        volumeMounts:
        - name: data
          mountPath: /var/lib/postgresql/data/pgdata
          subPath: postgresql-db
      volumes:
      - name: data
        emptyDir: {}
---
# Source: mojaloop/charts/central/charts/centraldirectory/charts/mockpathfinder/templates/deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: test123-mockpathfinder
  labels:
    app: test123-mockpathfinder
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: test123-mockpathfinder
        chart: mockpathfinder-2.4.0
        release: test123
        heritage: Tiller
    spec:
      initContainers:
        - name: wait-for-postgres
          image: bowerswilkins/awaitpostgres
          imagePullPolicy: Always
          env:
          - name: "POSTGRES_URL"
            value: "postgresql://mock-pathfinder:IypvXbJ1Zb@test123-mockpathfinder-postgresql:5432/mock_pathfinder?sslmode=disable"
      containers:
        - name: mockpathfinder
          image: "mojaloop/mock-pathfinder:v2.4"
          imagePullPolicy: Always
          ports:
            - name: tcp-prov
              containerPort: 8080
            - name: tcp-query
              containerPort: 15353
            - name: udp-query
              containerPort: 15353
          # livenessProbe:
          #   httpGet:
          #     path: /health
          #     port: 8080
          #     httpHeaders:
          #     - name: X-Custom-Header
          #      value: Awesome
          #   initialDelaySeconds: 30
          #   periodSeconds: 3
          # securityContext:
          #   capabilities:
          #     add:
          #       - NET_ADMIN
          env:
            - name: MOPF_DATABASE_URI
              valueFrom:
                secretKeyRef:
                  name: test123-mockpathfinder
                  key: db.uri
          volumeMounts:
          - name: test123-mockpathfinder-config-volume
            mountPath: /opt/mock-pathfinder/config
      volumes:
        - name: test123-mockpathfinder-config-volume
          configMap:
            name: test123-mockpathfinder
            items:
            - key: default.json
              path: default.json
            - key: knexfile.js
              path: knexfile.js
---
# Source: mojaloop/charts/central/charts/centraldirectory/charts/postgresql/templates/deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: test123-centraldirectory-postgresql
  labels:
    app: test123-centraldirectory-postgresql
    chart: "postgresql-0.9.1"
    release: "test123"
    heritage: "Tiller"
spec:
  template:
    metadata:
      labels:
        app: test123-centraldirectory-postgresql
    spec:
      containers:
      - name: test123-centraldirectory-postgresql
        image: "postgres:9.6.2"
        imagePullPolicy: ""
        args:
        env:
        - name: POSTGRES_USER
          value: "central-directory"
          # Required for pg_isready in the health probes.
        - name: PGUSER
          value: "central-directory"
        - name: POSTGRES_DB
          value: "central_directory"
        - name: POSTGRES_INITDB_ARGS
          value: ""
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: test123-centraldirectory-postgresql
              key: postgres-password
        - name: POD_IP
          valueFrom: { fieldRef: { fieldPath: status.podIP } }
        ports:
        - name: postgresql
          containerPort: 5432
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - exec pg_isready --host $POD_IP
          initialDelaySeconds: 120
          timeoutSeconds: 5
          failureThreshold: 6
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - exec pg_isready --host $POD_IP
          initialDelaySeconds: 5
          timeoutSeconds: 3
          periodSeconds: 5
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          
        volumeMounts:
        - name: data
          mountPath: /var/lib/postgresql/data/pgdata
          subPath: postgresql-db
      volumes:
      - name: data
        emptyDir: {}
---
# Source: mojaloop/charts/central/charts/centraldirectory/templates/deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: test123-centraldirectory
  labels:
    app: test123-centraldirectory
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: test123-centraldirectory
        chart: centraldirectory-2.4.0
        release: test123
        heritage: Tiller
    spec:
      initContainers:
        - name: wait-for-postgres
          image: bowerswilkins/awaitpostgres
          imagePullPolicy: Always
          env:
          - name: "POSTGRES_URL"
            value: "postgresql://central-directory:gR5hARbsfa@test123-centraldirectory-postgresql:5432/central_directory?sslmode=disable"
      containers:
        - name: centraldirectory
          image: "mojaloop/central-directory:v2.4"
          imagePullPolicy: Always
          ports:
            - name: http-api
              containerPort: 3000
          readinessProbe:
            httpGet:
              path: /health
              port: 3000
            initialDelaySeconds: 60
            periodSeconds: 15
          livenessProbe:
            httpGet:
              path: /health
              port: 3000
            initialDelaySeconds: 60
            periodSeconds: 15
          # securityContext:
          #   capabilities:
          #     add:
          #       - NET_ADMIN
          env:
            - name: CDIR_DATABASE_URI
              valueFrom:
                secretKeyRef:
                  name: test123-centraldirectory
                  key: db.uri
            - name: CDIR_ADMIN_KEY
              valueFrom:
                configMapKeyRef:
                  name: test123-centraldirectory
                  key: cdir.admin.key
            - name: CDIR_ADMIN_SECRET
              valueFrom:
                configMapKeyRef:
                  name: test123-centraldirectory
                  key: cdir.admin.secret
            - name: CDIR_PATHFINDER__PROVISIONING__ADDRESS
              valueFrom:
                configMapKeyRef:
                  name: test123-centraldirectory
                  key: cdir.pathfinder.provisioning.address
            - name: CDIR_PATHFINDER__QUERY__ADDRESS
              valueFrom:
                configMapKeyRef:
                  name: test123-centraldirectory
                  key: cdir.pathfinder.query.address
            - name: CDIR_PATHFINDER__QUERY__PORT
              valueFrom:
                configMapKeyRef:
                  name: test123-centraldirectory
                  key: cdir.pathfinder.query.port
          volumeMounts:
          - name: test123-centraldirectory-config-volume
            mountPath: /opt/mock-pathfinder/config
      volumes:
        - name: test123-centraldirectory-config-volume
          configMap:
            name: test123-centraldirectory
            items:
            - key: default.json
              path: default.json
            - key: knexfile.js
              path: knexfile.js
---
# Source: mojaloop/charts/central/charts/centralhub/charts/centralledger/charts/forensicloggingsidecar/charts/centralkms/charts/postgresql/templates/deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: test123-centralkms-postgresql
  labels:
    app: test123-centralkms-postgresql
    chart: "postgresql-0.9.1"
    release: "test123"
    heritage: "Tiller"
spec:
  template:
    metadata:
      labels:
        app: test123-centralkms-postgresql
    spec:
      containers:
      - name: test123-centralkms-postgresql
        image: "postgres:9.6.2"
        imagePullPolicy: ""
        args:
        env:
        - name: POSTGRES_USER
          value: "kms"
          # Required for pg_isready in the health probes.
        - name: PGUSER
          value: "kms"
        - name: POSTGRES_DB
          value: "central_kms"
        - name: POSTGRES_INITDB_ARGS
          value: ""
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: test123-centralkms-postgresql
              key: postgres-password
        - name: POD_IP
          valueFrom: { fieldRef: { fieldPath: status.podIP } }
        ports:
        - name: postgresql
          containerPort: 5432
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - exec pg_isready --host $POD_IP
          initialDelaySeconds: 120
          timeoutSeconds: 5
          failureThreshold: 6
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - exec pg_isready --host $POD_IP
          initialDelaySeconds: 5
          timeoutSeconds: 3
          periodSeconds: 5
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          
        volumeMounts:
        - name: data
          mountPath: /var/lib/postgresql/data/pgdata
          subPath: postgresql-db
      volumes:
      - name: data
        emptyDir: {}
---
# Source: mojaloop/charts/central/charts/centralhub/charts/centralledger/charts/forensicloggingsidecar/charts/centralkms/templates/deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: test123-centralkms
  labels:
    app: test123-centralkms
    chart: centralkms-2.4.0
    release: test123
    heritage: Tiller
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: test123-centralkms
        chart: centralkms-2.4.0
        release: test123
        heritage: Tiller
    spec:
      initContainers:
        - name: wait-for-postgres
          image: bowerswilkins/awaitpostgres
          imagePullPolicy: Always
          env:
          - name: "POSTGRES_URL"
            value: "postgresql://kms:xD873IyaQB@test123-centralkms-postgresql:5432/central_kms?sslmode=disable"
      containers:
        - name: centralkms
          image: "mojaloop/central-kms:v2.4"
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
          readinessProbe:
            httpGet:
              path: /sidecars
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 5
          livenessProbe:
            httpGet:
              path: /sidecars
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 5
          env:
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: test123-centralkms
                  key: db.username
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: test123-centralkms
                  key: db.password
            - name: DB_HOST
              valueFrom:
                configMapKeyRef:
                  name: test123-centralkms
                  key: db.host
            - name: DB_PORT
              valueFrom:
                configMapKeyRef:
                  name: test123-centralkms
                  key: db.port
---
# Source: mojaloop/charts/central/charts/centralhub/charts/centralledger/charts/forensicloggingsidecar/charts/postgresql/templates/deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: test123-forensicloggingsidecar-ledger-postgresql
  labels:
    app: test123-forensicloggingsidecar-ledger-postgresql
    chart: "postgresql-0.9.1"
    release: "test123"
    heritage: "Tiller"
spec:
  template:
    metadata:
      labels:
        app: test123-forensicloggingsidecar-ledger-postgresql
    spec:
      containers:
      - name: test123-forensicloggingsidecar-ledger-postgresql
        image: "postgres:9.6.2"
        imagePullPolicy: ""
        args:
        env:
        - name: POSTGRES_USER
          value: "sidecar"
          # Required for pg_isready in the health probes.
        - name: PGUSER
          value: "sidecar"
        - name: POSTGRES_DB
          value: "sidecar"
        - name: POSTGRES_INITDB_ARGS
          value: ""
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: test123-forensicloggingsidecar-ledger-postgresql
              key: postgres-password
        - name: POD_IP
          valueFrom: { fieldRef: { fieldPath: status.podIP } }
        ports:
        - name: postgresql
          containerPort: 5432
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - exec pg_isready --host $POD_IP
          initialDelaySeconds: 120
          timeoutSeconds: 5
          failureThreshold: 6
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - exec pg_isready --host $POD_IP
          initialDelaySeconds: 5
          timeoutSeconds: 3
          periodSeconds: 5
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          
        volumeMounts:
        - name: data
          mountPath: /var/lib/postgresql/data/pgdata
          subPath: postgresql-db
      volumes:
      - name: data
        emptyDir: {}
---
# Source: mojaloop/charts/central/charts/centralhub/charts/centralledger/charts/forensicloggingsidecar/templates/deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: test123-forensicloggingsidecar-ledger
  labels:
    app: test123-forensicloggingsidecar-ledger
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: test123-forensicloggingsidecar-ledger
        chart: forensicloggingsidecar-2.4.0
        release: test123
        heritage: Tiller
    spec:
      initContainers:
        - name: wait-for-postgres
          image: bowerswilkins/awaitpostgres
          imagePullPolicy: Always
          env:
          - name: "POSTGRES_URL"
            value: "postgresql://sidecar:Wqt0KlkKvL@test123-forensicloggingsidecar-ledger-postgresql:5432/sidecar?sslmode=disable"
      containers:
        - name: forensicloggingsidecar
          image: "mojaloop/forensic-logging-sidecar:v2.4"
          imagePullPolicy: Always
          command: ["/opt/sidecar/server.sh"]
          ports:
            - containerPort: 5678
          readinessProbe:
            tcpSocket:
              port: 5678
            initialDelaySeconds: 90
            periodSeconds: 15
          livenessProbe:
            tcpSocket:
              port: 5678
            initialDelaySeconds: 90
            periodSeconds: 15
          securityContext:
            capabilities:
              add:
                - NET_ADMIN
          env:
            - name: SIDE_PORT
              valueFrom:
                configMapKeyRef:
                  name: test123-forensicloggingsidecar-ledger
                  key: sidecar.port
            - name: SIDE_KMS__URL
              valueFrom:
                configMapKeyRef:
                  name: test123-forensicloggingsidecar-ledger
                  key: kms.uri
            - name: SIDE_DATABASE_URI
              valueFrom:
                secretKeyRef:
                  name: test123-forensicloggingsidecar-ledger
                  key: db.uri
          volumeMounts:
          - name: test123-forensicloggingsidecar-ledger-config-volume
            mountPath: /opt/sidecar/config
      volumes:
        - name: test123-forensicloggingsidecar-ledger-config-volume
          configMap:
            name: test123-forensicloggingsidecar-ledger
            items:
            - key: default.json
              path: default.json
            - key: knexfile.js
              path: knexfile.js
---
# Source: mojaloop/charts/central/charts/centralhub/charts/centralledger/charts/postgresql/templates/deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: test123-centralledger-postgresql
  labels:
    app: test123-centralledger-postgresql
    chart: "postgresql-0.9.1"
    release: "test123"
    heritage: "Tiller"
spec:
  template:
    metadata:
      labels:
        app: test123-centralledger-postgresql
    spec:
      containers:
      - name: test123-centralledger-postgresql
        image: "postgres:9.6.2"
        imagePullPolicy: ""
        args:
        env:
        - name: POSTGRES_USER
          value: "central_ledger"
          # Required for pg_isready in the health probes.
        - name: PGUSER
          value: "central_ledger"
        - name: POSTGRES_DB
          value: "central_ledger"
        - name: POSTGRES_INITDB_ARGS
          value: ""
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: test123-centralledger-postgresql
              key: postgres-password
        - name: POD_IP
          valueFrom: { fieldRef: { fieldPath: status.podIP } }
        ports:
        - name: postgresql
          containerPort: 5432
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - exec pg_isready --host $POD_IP
          initialDelaySeconds: 120
          timeoutSeconds: 5
          failureThreshold: 6
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - exec pg_isready --host $POD_IP
          initialDelaySeconds: 5
          timeoutSeconds: 3
          periodSeconds: 5
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          
        volumeMounts:
        - name: data
          mountPath: /var/lib/postgresql/data/pgdata
          subPath: postgresql-db
      volumes:
      - name: data
        emptyDir: {}
---
# Source: mojaloop/charts/central/charts/centralhub/charts/centralledger/templates/deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: test123-centralledger
  labels:
    app: test123-centralledger
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: test123-centralledger
        chart: centralledger-2.4.0
        release: test123
        heritage: Tiller
    spec:
      containers:
        - name: centralledger
          image: "mojaloop/central-ledger:v2.4"
          imagePullPolicy: Always
          command: ["node", "src/api/index.js"]
          ports:
            - name: http-api
              containerPort: 3000
          readinessProbe:
            httpGet:
              path: /health
              port: 3000
            initialDelaySeconds: 120
            periodSeconds: 15
          livenessProbe:
            httpGet:
              path: /health
              port: 3000
            initialDelaySeconds: 90
            periodSeconds: 15
          env:
            - name: CLEDG_PORT
              valueFrom:
                configMapKeyRef:
                  name: test123-centralledger
                  key: server.port
            - name: CLEDG_HOSTNAME
              valueFrom:
                configMapKeyRef:
                  name: test123-centralledger
                  key: server.host
            - name: CLEDG_DATABASE_URI
              valueFrom:
                secretKeyRef:
                  name: test123-centralledger
                  key: db.uri
          volumeMounts:
          - name: test123-centralledger-config-volume
            mountPath: /opt/central-ledger/config
        - name: centralledger-admin
          image: "mojaloop/central-ledger:v2.4"
          imagePullPolicy: Always
          command: ["node", "src/admin/index.js"]
          ports:
            - name: http-api-admin
              containerPort: 3001
          readinessProbe:
            httpGet:
              path: /health
              port: 3001
            initialDelaySeconds: 120
            periodSeconds: 15
          livenessProbe:
            httpGet:
              path: /health
              port: 3001
            initialDelaySeconds: 90
            periodSeconds: 15
          env:
            - name: CLEDG_ADMIN_PORT
              valueFrom:
                configMapKeyRef:
                  name: test123-centralledger
                  key: admin.port
            - name: CLEDG_ADMIN_KEY
              valueFrom:
                secretKeyRef:
                  name: test123-centralledger
                  key: admin.key
            - name: CLEDG_ADMIN_SECRET
              valueFrom:
                secretKeyRef:
                  name: test123-centralledger
                  key: admin.secret
            - name: CLEDG_HOSTNAME
              valueFrom:
                configMapKeyRef:
                  name: test123-centralledger
                  key: admin.host
            - name: CLEDG_DATABASE_URI
              valueFrom:
                secretKeyRef:
                  name: test123-centralledger
                  key: db.uri
          volumeMounts:
          - name: test123-centralledger-config-volume
            mountPath: /opt/central-ledger/config
      volumes:
        - name: test123-centralledger-config-volume
          configMap:
            name: test123-centralledger
            items:
            - key: default.json
              path: default.json
            - key: knexfile.js
              path: knexfile.js
---
# Source: mojaloop/charts/central/charts/centralhub/templates/deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: test123-centralhub
  labels:
    app: test123-centralhub
    chart: centralhub-2.4.0
    release: test123
    heritage: Tiller
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: test123-centralhub
        chart: centralhub-2.4.0
        release: test123
        heritage: Tiller
    spec:
      containers:
        - name: centralhub
          image: "mojaloop/central-hub:v2.4"
          imagePullPolicy: Always
          ports:
            - containerPort: 4001
          livenessProbe:
            httpGet:
              path: /health
              port: 4001
            initialDelaySeconds: 45
            periodSeconds: 15
          volumeMounts:
            - name: test123-centralhub-config-volume
              mountPath: /opt/central-hub/config
      volumes:
        - name: test123-centralhub-config-volume
          configMap:
            name: test123-centralhub
            items:
            - key: default.json
              path: default.json
---
# Source: mojaloop/charts/interop-switch/charts/postgresql/templates/deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: test123-interop-switch-postgresql
  labels:
    app: test123-interop-switch-postgresql
    chart: "postgresql-0.9.1"
    release: "test123"
    heritage: "Tiller"
spec:
  template:
    metadata:
      labels:
        app: test123-interop-switch-postgresql
    spec:
      containers:
      - name: test123-interop-switch-postgresql
        image: "postgres:9.6.2"
        imagePullPolicy: ""
        args:
        env:
        - name: POSTGRES_USER
          value: "interop_switch"
          # Required for pg_isready in the health probes.
        - name: PGUSER
          value: "interop_switch"
        - name: POSTGRES_DB
          value: "interop_switch"
        - name: POSTGRES_INITDB_ARGS
          value: ""
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: test123-interop-switch-postgresql
              key: postgres-password
        - name: POD_IP
          valueFrom: { fieldRef: { fieldPath: status.podIP } }
        ports:
        - name: postgresql
          containerPort: 5432
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - exec pg_isready --host $POD_IP
          initialDelaySeconds: 120
          timeoutSeconds: 5
          failureThreshold: 6
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - exec pg_isready --host $POD_IP
          initialDelaySeconds: 5
          timeoutSeconds: 3
          periodSeconds: 5
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          
        volumeMounts:
        - name: data
          mountPath: /var/lib/postgresql/data/pgdata
          subPath: postgresql-db
      volumes:
      - name: data
        emptyDir: {}
---
# Source: mojaloop/charts/interop-switch/templates/deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: test123-interop-switch
  labels:
    app: test123-interop-switch
    chart: interop-switch-2.4.0
    release: test123
    heritage: Tiller
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: test123-interop-switch
        chart: interop-switch-2.4.0
        release: test123
        heritage: Tiller
    spec:
      initContainers:
        - name: create-tables
          image: mojaloop/interop-switch-init-container:latest
          imagePullPolicy: Always
          env:
          - name: "PGHOST"
            value: "test123-interop-switch-postgresql"
          - name: "PGPORT"
            value: "5432"
          - name: "PGUSER"
            value: "interop_switch"
          - name: "PGPASSWORD"
            value: "cVq8iFqaLuHy8jjKuA"
          - name: "PGDATABASE"
            value: "interop_switch"
      containers:
        - name: interop-switch
          image: "mojaloop/interop-switch:v2.4"
          imagePullPolicy: Always
          ports:
            - containerPort: 8088
          env:
            - name: SWITCH_SERVICE_HOST
              valueFrom:
                configMapKeyRef:
                  name: test123-interop-switch
                  key: SWITCH_SERVICE_HOST
            - name: SWITCH_SERVICE_PORT
              valueFrom:
                configMapKeyRef:
                  name: test123-interop-switch
                  key: SWITCH_SERVICE_PORT
            - name: CENTRAL_DIR_HOST
              valueFrom:
                configMapKeyRef:
                  name: test123-interop-switch
                  key: CENTRAL_DIR_HOST
            - name: CENTRAL_DIR_PORT
              valueFrom:
                configMapKeyRef:
                  name: test123-interop-switch
                  key: CENTRAL_DIR_PORT
            - name: CONNECTOR_HOST
              valueFrom:
                configMapKeyRef:
                  name: test123-interop-switch
                  key: CONNECTOR_HOST
            - name: PSQL_HOST
              valueFrom:
                configMapKeyRef:
                  name: test123-interop-switch
                  key: PSQL_HOST
            - name: PSQL_PORT
              valueFrom:
                configMapKeyRef:
                  name: test123-interop-switch
                  key: PSQL_PORT
            - name: PSQL_DATABASE
              valueFrom:
                configMapKeyRef:
                  name: test123-interop-switch
                  key: PSQL_DATABASE
            - name: PSQL_USER
              valueFrom:
                secretKeyRef:
                  name: test123-interop-switch
                  key: PSQL_USER
            - name: PSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: test123-interop-switch
                  key: PSQL_PASSWORD
            - name: ML_API_ADAPTER_HOST
              valueFrom:
                configMapKeyRef:
                  name: test123-interop-switch
                  key: ML_API_ADAPTER_HOST
            - name: ML_API_ADAPTER_PORT
              valueFrom:
                configMapKeyRef:
                  name: test123-interop-switch
                  key: ML_API_ADAPTER_PORT
---
# Source: mojaloop/charts/ml-api-adapter/charts/ml-api-adapter-handler-notification/templates/deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: test123-ml-api-adapter-handler-notification
  labels:
    app: test123-ml-api-adapter-handler-notification
    chart: ml-api-adapter-handler-notification-3.4.0
    release: test123
    heritage: Tiller
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: test123-ml-api-adapter-handler-notification
        chart: ml-api-adapter-handler-notification-3.4.0
        release: test123
        heritage: Tiller
    spec:
      containers:
        - name: ml-api-adapter-handler-notification
          image: "mojaloop/ml-api-adapter:v3.3.0-snapshot"
          imagePullPolicy: Always
          command: ["node", "src/handlers/index.js", "handler", "--notification"]
          ports:
            - containerPort: 8088
          volumeMounts:
            - name: test123-ml-api-adapter-handler-notification-config-volume
              mountPath: /opt/ml-api-adapter/config
      volumes:
        - name: test123-ml-api-adapter-handler-notification-config-volume
          configMap:
            name: test123-ml-api-adapter-handler-notification
            items:
            - key: default.json
              path: default.json
---
# Source: mojaloop/charts/ml-api-adapter/charts/ml-api-adapter-service/templates/deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: test123-ml-api-adapter-service
  labels:
    app: test123-ml-api-adapter-service
    chart: ml-api-adapter-service-3.4.0
    release: test123
    heritage: Tiller
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: test123-ml-api-adapter-service
        chart: ml-api-adapter-service-3.4.0
        release: test123
        heritage: Tiller
    spec:
      containers:
        - name: ml-api-adapter-service
          image: "mojaloop/ml-api-adapter:v3.3.0-snapshot"
          imagePullPolicy: Always
          command: ["node", "src/api/index.js"]
          ports:
            - containerPort: 8088
          volumeMounts:
            - name: test123-ml-api-adapter-service-config-volume
              mountPath: /opt/ml-api-adapter/config
      volumes:
        - name: test123-ml-api-adapter-service-config-volume
          configMap:
            name: test123-ml-api-adapter-service
            items:
            - key: default.json
              path: default.json
---
# Source: mojaloop/charts/central/charts/centralhub/charts/centralledger/charts/kafka/charts/zookeeper/templates/statefulset.yaml
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: test123-zookeeper
  labels:
    app: "zookeeper"
    chart: "zookeeper-0.5.0"
    release: "test123"
    heritage: "Tiller"
spec:
  serviceName: test123-zookeeper-headless
  replicas: 3
  updateStrategy:
    type: OnDelete
    
  template:
    metadata:
      labels:
        app: "zookeeper"
        release: "test123"
    spec:
      containers:
      - name: zookeeper-server
        imagePullPolicy: IfNotPresent
        image: gcr.io/google_samples/k8szk:v2
        resources:
          limits:
            cpu: 1
            memory: 4Gi
          requests:
            cpu: 500m
            memory: 2Gi
          
        ports:
        - containerPort: 2181
          name: client
        - containerPort: 2888
          name: server
        - containerPort: 3888
          name: leader-election
        env:
        - name : ZK_REPLICAS
          value: "3"
        - name : ZK_HEAP_SIZE
          value: "1G"
        - name : ZK_TICK_TIME
          value: "2000"
        - name : ZK_INIT_LIMIT
          value: "10"
        - name : ZK_SYNC_LIMIT
          value: "5"
        - name : ZK_MAX_CLIENT_CNXNS
          value: "60"
        - name: ZK_SNAP_RETAIN_COUNT
          value: "3"
        - name: ZK_PURGE_INTERVAL
          value: "1"
        - name: ZK_LOG_LEVEL
          value: INFO
        - name: ZK_CLIENT_PORT
          value: "2181"
        - name: ZK_SERVER_PORT
          value: "2888"
        - name: ZK_ELECTION_PORT
          value: "3888"
        command:
        - sh
        - -c
        - zkGenConfig.sh && exec zkServer.sh start-foreground
        readinessProbe:
          exec:
            command:
            - "zkOk.sh"
          initialDelaySeconds: 15
          timeoutSeconds: 5
        livenessProbe:
          exec:
            command:
            - "zkOk.sh"
          initialDelaySeconds: 15
          timeoutSeconds: 5
        volumeMounts:
        - name: datadir
          mountPath: /var/lib/zookeeper
          subPath: data
      
      volumes:
      - name: datadir
        emptyDir: {}
---
# Source: mojaloop/charts/central/charts/centralhub/charts/centralledger/charts/kafka/templates/statefulset.yaml
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: test123-kafka
  labels:
    app: kafka
    chart: kafka-0.7.2
    release: test123
    heritage: Tiller
spec:
  serviceName: test123-kafka-headless
  podManagementPolicy: OrderedReady
  updateStrategy:
    type: OnDelete
    
  replicas: 1
  template:
    metadata:
      labels:
        app: kafka
        release: test123
    spec:
      serviceAccountName: test123
      containers:
      - name: kafka-broker
        image: "confluentinc/cp-kafka:4.0.1-1"
        imagePullPolicy: "IfNotPresent"
        livenessProbe:
          exec:
            command:
              - sh
              - -ec
              - /usr/bin/jps | /bin/grep -q SupportedKafka
          initialDelaySeconds: 30
          timeoutSeconds: 5
        readinessProbe:
          tcpSocket:
            port: kafka
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        ports:
        - containerPort: 9092
          name: kafka
        resources:
          {}
          
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: KAFKA_HEAP_OPTS
          value: 
        - name: KAFKA_ZOOKEEPER_CONNECT
          value: "test123-zookeeper:2181"
        - name: KAFKA_LOG_DIRS
          value: "/opt/kafka/data/logs"
        - name: "KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR"
          value: "1"
        - name: KAFKA_JMX_PORT
          value: "5555"
        # This is required because the Downward API does not yet support identification of
        # pod numbering in statefulsets. Thus, we are required to specify a command which
        # allows us to extract the pod ID for usage as the Kafka Broker ID.
        # See: https://github.com/kubernetes/kubernetes/issues/31218
        command:
        - sh
        - -exc
        - |
          export KAFKA_BROKER_ID=${HOSTNAME##*-} && \
          export KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://${POD_IP}:9092 && \
          exec /etc/confluent/docker/run
        volumeMounts:
        - name: datadir
          mountPath: "/opt/kafka/data"
      volumes:
      - name: datadir
        emptyDir: {}
      terminationGracePeriodSeconds: 60
---
# Source: mojaloop/charts/central/charts/centralhub/charts/centralledger/charts/mysql/templates/statefulset.yaml
apiVersion: apps/v1beta2
kind: StatefulSet
metadata:
  name: test123-centralledger-mysql
  labels:
    app: test123-centralledger-mysql
    chart: "mysql-0.1.4"
    release: "test123"
    heritage: "Tiller"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: test123-centralledger-mysql
      release: "test123"
  serviceName: test123-centralledger-mysql
  template:
    metadata:
      labels:
        app: test123-centralledger-mysql
        chart: "mysql-0.1.4"
        release: "test123"
        heritage: "Tiller"
    spec:
      initContainers:
      - name: "remove-lost-found"
        image: "busybox:1.25.0"
        imagePullPolicy: IfNotPresent
        command:
        - "rm"
        - "-fr"
        - "/var/lib/mysql/lost+found"
        volumeMounts:
        - name: mysql-data
          mountPath: /var/lib/mysql
      containers:
      - name: database
        image: "percona/percona-xtradb-cluster:5.7.19"
        imagePullPolicy: "Always"
        command:
        - "/bin/bash"
        - "/startup-scripts/entrypoint.sh"
        resources:
          null
          
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: test123-centralledger-mysql
              key: mysql-root-password
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: test123-centralledger-mysql
              key: mysql-password
        - name: XTRABACKUP_PASSWORD
          valueFrom:
            secretKeyRef:
              name: test123-centralledger-mysql
              key: xtrabackup-password
        - name: MYSQL_USER
          value: "central_ledger"
        - name: MYSQL_DATABASE
          value: "central_ledger"
        - name: ALLOW_ROOT_FROM
          value: "%"
        - name: CLUSTER_NAME
          value: test123-centralledger-mysql
        - name: K8S_SERVICE_NAME
          value: test123-centralledger-mysql-repl
        - name: DEBUG
          value: "true"
        ports:
        - name: mysql
          containerPort: 3306
        - name: galera-repl
          containerPort: 4567
        - name: state-transfer
          containerPort: 4568
        - name: state-snapshot
          containerPort: 4444
        livenessProbe:
          exec:
            command: ["mysqladmin","ping"]
          initialDelaySeconds: 30
          timeoutSeconds: 2
        readinessProbe:
          exec:
            command: ["mysql", "-h", "127.0.0.1", "-e", "SELECT 1"]
          initialDelaySeconds: 30
          timeoutSeconds: 2
        volumeMounts:
        - name: mysql-data
          mountPath: /var/lib/mysql
        - name: mysql-startup-scripts
          mountPath: /startup-scripts
        - name: mysql-config-files
          mountPath: /etc/mysql/conf.d
        - name: slash-root
          mountPath: /root
        - name: var-log
          mountPath: /var/log
      
      - name: "logs"
        image: "busybox:1.25.0"
        imagePullPolicy: IfNotPresent
        command:
        - "tail"
        - "-f"
        - "/var/log/mysqld.log"
        volumeMounts:
        - name: var-log
          mountPath: /var/log
      
      
      volumes:
      - name: slash-root
        emptyDir: {}
      - name: var-log
        emptyDir: {}
      - name: mysql-config-files
        configMap:
          name: test123-centralledger-mysql-config-files
      - name: mysql-startup-scripts
        configMap:
          name: test123-centralledger-mysql-startup-scripts
      - name: mysql-data
        emptyDir: {}
---
# Source: mojaloop/charts/central/charts/centraldirectory/templates/ingress.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: test123-centraldirectory
  labels:
    app: test123-centraldirectory
    chart: centraldirectory-2.4.0
    release: test123
    heritage: Tiller
  annotations:
      nginx.ingress.kubernetes.io/rewrite-target: "/"
spec:
  rules:
    - host: central-directory.local
      http:
        paths:
          - path: /
            backend:
              serviceName: test123-centraldirectory
              servicePort: 3000
---
# Source: mojaloop/charts/central/charts/centralhub/charts/centralledger/charts/forensicloggingsidecar/charts/centralkms/templates/ingress.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: test123-centralkms
  labels:
    app: test123-centralkms
    chart: centralkms-2.4.0
    release: test123
    heritage: Tiller
  annotations:
spec:
  rules:
    - host: central-kms.local
      http:
        paths:
          - path: /
            backend:
              serviceName: test123-centralkms
              servicePort: 8080
---
# Source: mojaloop/charts/central/charts/centralhub/charts/centralledger/templates/ingress.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: test123-centralledger
  labels:
    app: test123-centralledger
    chart: centralledger-2.4.0
    release: test123
    heritage: Tiller
  annotations:
      nginx.ingress.kubernetes.io/rewrite-target: "/"
spec:
  rules:
    - host: central-ledger.local
      http:
        paths:
          - path: /
            backend:
              serviceName: test123-centralledger
              servicePort: 3000
    - host: central-ledger.local
      http:
        paths:
          - path: /admin
            backend:
              serviceName: test123-centralledger
              servicePort: 3001
---
# Source: mojaloop/charts/central/charts/centralhub/templates/ingress.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: test123-centralhub
  labels:
    app: test123-centralhub
    chart: centralhub-2.4.0
    release: test123
    heritage: Tiller
  annotations:
spec:
  rules:
    - host: central-hub.local
      http:
        paths:
          - path: /
            backend:
              serviceName: test123-centralhub
              servicePort: 4001
---
# Source: mojaloop/charts/interop-switch/templates/ingress.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: test123-interop-switch
  labels:
    app: test123-interop-switch
    chart: interop-switch-2.4.0
    release: test123
    heritage: Tiller
  annotations:
      nginx.ingress.kubernetes.io/rewrite-target: "/switch/v1"
spec:
  rules:
    - host: interop-switch.local
      http:
        paths:
          - path: /interop/switch/v1
            backend:
              serviceName: test123-interop-switch
              servicePort: 8088
---
# Source: mojaloop/charts/ml-api-adapter/charts/ml-api-adapter-handler-notification/templates/ingress.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: test123-ml-api-adapter-handler-notification
  labels:
    app: test123-ml-api-adapter-handler-notification
    chart: ml-api-adapter-handler-notification-3.4.0
    release: test123
    heritage: Tiller
  annotations:
      nginx.ingress.kubernetes.io/rewrite-target: "/"
spec:
  rules:
    - host: ml-api-adapter.local
      http:
        paths:
          - path: /
            backend:
              serviceName: test123-ml-api-adapter-handler-notification
              servicePort: 8088
---
# Source: mojaloop/charts/ml-api-adapter/charts/ml-api-adapter-service/templates/ingress.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: test123-ml-api-adapter-service
  labels:
    app: test123-ml-api-adapter-service
    chart: ml-api-adapter-service-3.4.0
    release: test123
    heritage: Tiller
  annotations:
      nginx.ingress.kubernetes.io/rewrite-target: "/"
spec:
  rules:
    - host: ml-api-adapter.local
      http:
        paths:
          - path: /
            backend:
              serviceName: test123-ml-api-adapter-service
              servicePort: 8088
---
# Source: mojaloop/charts/central/charts/centralhub/charts/centralledger/charts/kafka/charts/zookeeper/templates/poddisruptionbudget.yaml
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: test123-zookeeper
  labels:
    app: "zookeeper"
    chart: "zookeeper-0.5.0"
    release: "test123"
    heritage: "Tiller"
spec:
  selector:
    matchLabels:
      app: "zookeeper"
      release: "test123"
  minAvailable: 2
LAST DEPLOYED: Mon Aug 13 13:47:39 2018
NAMESPACE: test123
STATUS: DEPLOYED

RESOURCES:
==> v1beta1/StatefulSet
NAME               DESIRED  CURRENT  AGE
test123-zookeeper  3        1        2s
test123-kafka      1        1        2s

==> v1beta1/PodDisruptionBudget
NAME               MIN AVAILABLE  MAX UNAVAILABLE  ALLOWED DISRUPTIONS  AGE
test123-zookeeper  2              N/A              0                    2s

==> v1/Pod(related)
NAME                                                             READY  STATUS             RESTARTS  AGE
test123-centralenduserregistry-postgresql-7757d87548-l74pq       0/1    ContainerCreating  0         2s
test123-centralenduserregistry-5fc6c5b6cd-zf69c                  0/1    Init:0/1           0         2s
test123-mockpathfinder-postgresql-6f8fd47c46-5rzfr               0/1    ContainerCreating  0         2s
test123-mockpathfinder-664bc57498-t924c                          0/1    Init:0/1           0         2s
test123-centraldirectory-postgresql-664d4744cb-tmlb4             0/1    ContainerCreating  0         2s
test123-centraldirectory-568c6747d8-vkbz5                        0/1    Init:0/1           0         2s
test123-centralkms-postgresql-5f4f9c584d-rzr6v                   0/1    ContainerCreating  0         2s
test123-centralkms-7864b98596-xg2rd                              0/1    Init:0/1           0         2s
test123-forensicloggingsidecar-ledger-postgresql-59fcd8bdflg44h  0/1    Pending            0         2s
test123-forensicloggingsidecar-ledger-6578bcd749-sn2tw           0/1    Pending            0         2s
test123-centralledger-postgresql-5cfc5498-4zqm9                  0/1    Pending            0         2s
test123-centralledger-779df49bb8-dptml                           0/2    ContainerCreating  0         1s
test123-centralhub-798876545-vbp76                               0/1    ContainerCreating  0         1s
test123-interop-switch-postgresql-b7b46755f-zzfgh                0/1    Pending            0         1s
test123-interop-switch-d88dd9dd4-cq48l                           0/1    Pending            0         1s
test123-ml-api-adapter-handler-notification-7cd5f7c487-cwxrk     0/1    Pending            0         1s
test123-ml-api-adapter-service-786f569555-nn65x                  0/1    ContainerCreating  0         0s
test123-zookeeper-0                                              0/1    ContainerCreating  0         2s
test123-kafka-0                                                  0/1    ContainerCreating  0         2s
test123-centralledger-mysql-0                                    0/2    Pending            0         2s

==> v1/Secret
NAME                                              TYPE    DATA  AGE
test123-centralenduserregistry-postgresql         Opaque  1     3s
test123-centralenduserregistry                    Opaque  1     3s
test123-mockpathfinder-postgresql                 Opaque  1     3s
test123-mockpathfinder                            Opaque  1     3s
test123-centraldirectory-postgresql               Opaque  1     3s
test123-centraldirectory                          Opaque  1     3s
test123-centralkms-postgresql                     Opaque  1     3s
test123-centralkms                                Opaque  2     3s
test123-forensicloggingsidecar-ledger-postgresql  Opaque  1     3s
test123-forensicloggingsidecar-ledger             Opaque  1     3s
test123-centralledger-mysql                       Opaque  3     3s
test123-centralledger-postgresql                  Opaque  1     3s
test123-centralledger                             Opaque  3     3s
test123-interop-switch-postgresql                 Opaque  1     3s
test123-interop-switch                            Opaque  2     3s

==> v1beta1/RoleBinding
NAME     AGE
test123  3s

==> v1/Service
NAME                                              TYPE       CLUSTER-IP     EXTERNAL-IP  PORT(S)                       AGE
test123-centralenduserregistry-postgresql         ClusterIP  10.43.61.95    <none>       5432/TCP                      3s
test123-centralenduserregistry                    ClusterIP  10.43.193.156  <none>       3001/TCP                      3s
test123-mockpathfinder-postgresql                 ClusterIP  10.43.206.203  <none>       5432/TCP                      3s
test123-mockpathfinder                            ClusterIP  10.43.64.103   <none>       8080/TCP,15353/TCP,15353/UDP  3s
test123-centraldirectory-postgresql               ClusterIP  10.43.5.135    <none>       5432/TCP                      3s
test123-centraldirectory                          ClusterIP  10.43.49.152   <none>       3000/TCP                      3s
test123-centralkms-postgresql                     ClusterIP  10.43.60.87    <none>       5432/TCP                      3s
test123-centralkms                                ClusterIP  10.43.106.64   <none>       8080/TCP                      3s
test123-forensicloggingsidecar-ledger-postgresql  ClusterIP  10.43.159.250  <none>       5432/TCP                      3s
test123-forensicloggingsidecar-ledger             ClusterIP  10.43.11.179   <none>       5678/TCP                      3s
test123-zookeeper                                 ClusterIP  10.43.117.101  <none>       2181/TCP                      3s
test123-zookeeper-headless                        ClusterIP  None           <none>       2888/TCP,3888/TCP             3s
test123-kafka                                     ClusterIP  10.43.3.87     <none>       9092/TCP                      3s
test123-kafka-headless                            ClusterIP  None           <none>       9092/TCP                      3s
test123-centralledger-mysql                       ClusterIP  10.43.220.227  <none>       3306/TCP                      3s
test123-centralledger-mysql-repl                  ClusterIP  None           <none>       4567/TCP,4568/TCP,4444/TCP    3s
test123-centralledger-postgresql                  ClusterIP  10.43.237.158  <none>       5432/TCP                      3s
test123-centralledger                             ClusterIP  10.43.135.173  <none>       3000/TCP,3001/TCP             3s
test123-centralhub                                ClusterIP  10.43.169.153  <none>       4001/TCP                      3s
test123-interop-switch-postgresql                 ClusterIP  10.43.140.22   <none>       5432/TCP                      2s
test123-interop-switch                            ClusterIP  10.43.150.42   <none>       8088/TCP                      2s
test123-ml-api-adapter-handler-notification       ClusterIP  10.43.215.210  <none>       8088/TCP                      2s
test123-ml-api-adapter-service                    ClusterIP  10.43.151.86   <none>       8088/TCP                      2s

==> v1beta1/Deployment
NAME                                              DESIRED  CURRENT  UP-TO-DATE  AVAILABLE  AGE
test123-centralenduserregistry-postgresql         1        1        1           0          2s
test123-centralenduserregistry                    1        1        1           0          2s
test123-mockpathfinder-postgresql                 1        1        1           0          2s
test123-mockpathfinder                            1        1        1           0          2s
test123-centraldirectory-postgresql               1        1        1           0          2s
test123-centraldirectory                          1        0        0           0          2s
test123-centralkms-postgresql                     1        0        0           0          2s
test123-centralkms                                1        0        0           0          2s
test123-forensicloggingsidecar-ledger-postgresql  1        0        0           0          2s
test123-forensicloggingsidecar-ledger             1        0        0           0          2s
test123-centralledger-postgresql                  1        0        0           0          2s
test123-centralledger                             1        0        0           0          2s
test123-centralhub                                1        0        0           0          2s
test123-interop-switch-postgresql                 1        0        0           0          2s
test123-interop-switch                            1        0        0           0          2s
test123-ml-api-adapter-handler-notification       1        0        0           0          2s
test123-ml-api-adapter-service                    1        0        0           0          2s

==> v1beta1/Ingress
NAME                                         HOSTS                                      ADDRESS  PORTS  AGE
test123-centraldirectory                     central-directory.local                    80       2s
test123-centralkms                           central-kms.local                          80       2s
test123-centralledger                        central-ledger.local,central-ledger.local  80       2s
test123-centralhub                           central-hub.local                          80       2s
test123-interop-switch                       interop-switch.local                       80       2s
test123-ml-api-adapter-handler-notification  ml-api-adapter.local                       80       2s
test123-ml-api-adapter-service               ml-api-adapter.local                       80       2s

==> v1/ConfigMap
NAME                                         DATA  AGE
test123-centralenduserregistry               4     3s
test123-mockpathfinder                       2     3s
test123-centraldirectory                     9     3s
test123-centralkms                           2     3s
test123-forensicloggingsidecar-ledger        4     3s
test123-centralledger-mysql-config-files     1     3s
test123-centralledger-mysql-startup-scripts  2     3s
test123-centralledger-mysql-tests            1     3s
test123-centralledger                        6     3s
test123-centralhub                           1     3s
test123-interop-switch                       10    3s
test123-ml-api-adapter-handler-notification  1     3s
test123-ml-api-adapter-service               1     3s

==> v1/ServiceAccount
NAME     SECRETS  AGE
test123  1        3s

==> v1beta1/Role
NAME     AGE
test123  3s

==> v1beta2/StatefulSet
NAME                         DESIRED  CURRENT  AGE
test123-centralledger-mysql  1        1        2s


